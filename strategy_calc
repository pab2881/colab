"""
Comprehensive Strategy Calculators for Betting Markets

This module provides calculation methods for 923 different betting strategies across
various sports betting markets. It handles calculations for matched betting strategies,
including calculating lay stakes, profit scenarios, and optimal betting strategies.

All calculations use the Decimal type for precision in financial operations.
"""

from typing import TypedDict, Dict, Union, List, Optional, Any, Tuple, cast
from typing_extensions import NotRequired
from decimal import Decimal, ROUND_HALF_UP, getcontext
from functools import lru_cache
import logging
from datetime import datetime

# Set decimal precision for financial calculations
getcontext().prec = 28

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Type definitions
class BetResult(TypedDict):
    """TypedDict defining the structure of a betting calculation result.
    
    All fields are required for the basic betting result structure.
    """
    type: str
    profit_scenarios: Dict[str, Decimal]
    min_profit: Decimal
    is_profitable: bool
    lay_stakes: Dict[str, Decimal]
    stake: Decimal
    commission: Decimal
    back_commission: Decimal

class BetResultOptionalFields(TypedDict, total=False):
    """TypedDict defining the optional fields for extended bet results."""
    handicap: Decimal        # For handicap markets
    goal_line: Decimal       # For over/under goals markets
    team: str                # For team-specific markets
    player: str              # For player-specific markets
    score: str               # For correct score markets
    ht_ft_result: str        # For HT/FT markets
    timestamp: str           # For time-based markets

class ExtendedBetResult(BetResult, BetResultOptionalFields):
    """Extended TypedDict with all fields from BetResult plus additional optional fields for specific bet types."""
    pass

# Custom exceptions
class BettingCalculationError(Exception):
    """Base exception for all betting calculation errors."""
    pass

class InvalidInputError(BettingCalculationError):
    """Exception raised when input validation fails."""
    pass

class DivisionByZeroError(BettingCalculationError):
    """Exception raised when division by zero occurs in calculations."""
    pass

class UnsupportedMarketError(BettingCalculationError):
    """Exception raised when an unsupported market type is requested."""
    pass


class StrategyCalculators:
    """
    A comprehensive class that provides calculation methods for various betting strategies.
    
    This class contains methods to calculate potential profits for matched betting
    strategies across 923 different bet types, handling commission rates,
    back and lay odds, and stake amounts with precision using Decimal.
    """

:
    """
    A comprehensive class that provides calculation methods for various betting strategies.
    
    This class contains methods to calculate potential profits for matched betting
    strategies across 923 different bet types, handling commission rates,
    back and lay odds, and stake amounts with precision using Decimal.
    """
    
    @staticmethod
    def validate_inputs(inputs: Dict[str, Any], required_keys: List[str],
                       type_checks: Optional[Dict[str, Union[Tuple[type, ...], type]]] = None) -> None:
        """
        Validate that inputs contain required keys with values of the expected types.
        
        Args:
            inputs: Dictionary of input values to validate
            required_keys: List of keys that must be present in inputs
            type_checks: Optional dictionary mapping keys to tuples of valid types
        
        Raises:
            InvalidInputError: If validation fails
        """
        logger.debug(f"Validating inputs: {inputs}")
        
        # Check required keys
        for key in required_keys:
            if key not in inputs:
                error_msg = f"Missing required input: {key}"
                logger.error(error_msg)
                raise InvalidInputError(error_msg)
            
            if inputs[key] is None:
                error_msg = f"Input {key} cannot be None"
                logger.error(error_msg)
                raise InvalidInputError(error_msg)
        
        # Verify types if specified
        if type_checks:
            for key, types in type_checks.items():
                if key in inputs and inputs[key] is not None:
                    if not isinstance(inputs[key], types):
                        error_msg = f"Input {key} must be one of types {types}, got {type(inputs[key])}"
                        logger.error(error_msg)
                        raise InvalidInputError(error_msg)
        
        # Convert numeric values to Decimal
        numeric_types = (int, float, Decimal)
        for key, value in inputs.items():
            if isinstance(value, (int, float)) and not isinstance(value, bool):
                inputs[key] = Decimal(str(value))
            elif isinstance(value, dict):
                for sub_key, sub_value in value.items():
                    if isinstance(sub_value, (int, float)) and not isinstance(sub_value, bool):
                        value[sub_key] = Decimal(str(sub_value))
        
        # Validate commission values are between 0 and 1
        for key in ['commission', 'back_commission']:
            if key in inputs and inputs[key] is not None:
                if not (Decimal('0') <= inputs[key] <= Decimal('1')):
                    error_msg = f"Commission {key} must be between 0 and 1, got {inputs[key]}"
                    logger.error(error_msg)
                    raise InvalidInputError(error_msg)
        
        logger.debug("Input validation passed")

    @staticmethod
    @lru_cache(maxsize=5000)
    def calculate_lay_stake(stake: Decimal,
                           back_odds: Decimal,
                           lay_odds: Decimal,
                           commission: Decimal = Decimal('0.02')) -> Decimal:
        """
        Calculate the lay stake required for a matched betting strategy.
        
        Args:
            stake: The back stake amount
            back_odds: The back odds (decimal format)
            lay_odds: The lay odds (decimal format)
            commission: The commission rate (default 0.02 or 2%)
            
        Returns:
            The calculated lay stake
            
        Raises:
            InvalidInputError: If inputs are invalid
            DivisionByZeroError: If division by zero occurs
        """
        logger.debug(f"Calculating lay stake: stake={stake}, back_odds={back_odds}, lay_odds={lay_odds}, commission={commission}")
        
        # Check for positive values
        if stake <= 0:
            error_msg = f"Stake must be positive, got {stake}"
            logger.error(error_msg)
            raise InvalidInputError(error_msg)
        
        # Ensure odds are >= 1.0
        if back_odds < 1:
            error_msg = f"Back odds must be >= 1.0, got {back_odds}"
            logger.error(error_msg)
            raise InvalidInputError(error_msg)
            
        if lay_odds < 1:
            error_msg = f"Lay odds must be >= 1.0, got {lay_odds}"
            logger.error(error_msg)
            raise InvalidInputError(error_msg)
        
        # Calculate denominator and check for division by zero
        denominator = lay_odds - commission
        if denominator == 0:
            error_msg = "Division by zero in lay stake calculation"
            logger.error(error_msg)
            raise DivisionByZeroError(error_msg)
        
        # Calculate lay stake
        lay_stake = (stake * back_odds) / denominator
        
        # Round to 2 decimal places
        lay_stake = lay_stake.quantize(Decimal('0.01'), rounding=ROUND_HALF_UP)
        
        logger.debug(f"Calculated lay stake: {lay_stake}")
        return lay_stake

    @staticmethod
    def calculate_profit_scenarios(
        stake: Decimal,
        back_odds_dict: Dict[str, Decimal],
        lay_odds_dict: Dict[str, Decimal],
                                  lay_stakes: Dict[str, Decimal],
                                  commission: Decimal,
                                  back_commission: Decimal) -> Dict[str, Decimal]:
        """
        Calculate profit scenarios for different outcomes.
        
        Args:
            stake: The back stake amount
            back_odds_dict: Dictionary mapping scenario names to back odds
            lay_odds_dict: Dictionary mapping scenario names to lay odds
            lay_stakes: Dictionary mapping scenario names to lay stakes
            commission: The commission rate for lay bets
            back_commission: The commission rate for back bets
            
        Returns:
            Dictionary mapping scenario names to profit amounts
            
        Raises:
            InvalidInputError: If inputs are invalid
        """
        logger.debug(f"Calculating profit scenarios: stake={stake}, back_odds_dict={back_odds_dict}, "
                     f"lay_odds_dict={lay_odds_dict}, lay_stakes={lay_stakes}, commission={commission}, "
                     f"back_commission={back_commission}")
        
        # Verify dictionaries have matching keys
        if set(back_odds_dict.keys()) != set(lay_odds_dict.keys()) or set(back_odds_dict.keys()) != set(lay_stakes.keys()):
            error_msg = "Back odds, lay odds, and lay stakes dictionaries must have the same keys"
            logger.error(error_msg)
            raise InvalidInputError(error_msg)
            
        # Calculate profit for each scenario
        profit_scenarios = {}
        scenarios = list(back_odds_dict.keys())
        
        for i, scenario in enumerate(scenarios):
            back_odds = back_odds_dict[scenario]
            lay_odds = lay_odds_dict[scenario]
            lay_stake = lay_stakes[scenario]
            
            # Back bet wins
            back_win = (stake * back_odds) - stake
            back_win_after_commission = back_win * (Decimal('1') - back_commission)
            
            # Lay bet loses
            lay_loss = lay_stake * (lay_odds - Decimal('1'))
            
            # Calculate profit for this scenario
            profit = (back_win_after_commission - lay_loss).quantize(Decimal('0.01'), rounding=ROUND_HALF_UP)
            profit_scenarios[scenario] = profit
            
            # Calculate profit for other scenarios where back bet loses and lay bet wins
            for j, other_scenario in enumerate(scenarios):
                if other_scenario != scenario:
                    # Back bet loses
                    back_loss = -stake
                    
                    # Lay bet wins
                    other_lay_stake = lay_stakes[other_scenario]
                    lay_win = other_lay_stake * (Decimal('1') - commission)
                    
                    # Calculate profit for this scenario
                    other_profit = (back_loss + lay_win).quantize(Decimal('0.01'), rounding=ROUND_HALF_UP)
                    
                    # Only update if this scenario doesn't exist or if this profit is higher
                    if other_scenario not in profit_scenarios or other_profit > profit_scenarios[other_scenario]:
                        profit_scenarios[other_scenario] = other_profit
        
        logger.debug(f"Calculated profit scenarios: {profit_scenarios}")
        return profit_scenarios

    @staticmethod
    def create_standard_result(bet_type: str,
                              profit_scenarios: Dict[str, Decimal],
                              lay_stakes: Dict[str, Decimal],
                              stake: Decimal,
                              commission: Decimal,
                              back_commission: Decimal,
                              extra_context: Optional[Dict[str, Any]] = None) -> Union[BetResult, ExtendedBetResult]:
        """
        Create a standardized result dictionary.
        
        Args:
            bet_type: The type of bet
            profit_scenarios: Dictionary mapping scenario names to profit amounts
            lay_stakes: Dictionary mapping scenario names to lay stakes
            stake: The back stake amount
            commission: The commission rate for lay bets
            back_commission: The commission rate for back bets
            extra_context: Optional additional context to include in the result
            
        Returns:
            A standardized BetResult dictionary or ExtendedBetResult if extra context is provided
        """
        logger.debug(f"Creating standard result for bet type {bet_type}")
        
        # Find minimum profit
        min_profit = min(profit_scenarios.values())
        
        # Create standardized result dictionary
        result: BetResult = {
            "type": bet_type,
            "profit_scenarios": profit_scenarios,
            "min_profit": min_profit,
            "is_profitable": min_profit > Decimal('0'),
            "lay_stakes": lay_stakes,
            "stake": stake,
            "commission": commission,
            "back_commission": back_commission
        }
        
        # Log result summary before returning
        logger.info(f"Bet type: {bet_type}, Min profit: {min_profit}, Profitable: {min_profit > 0}")
        
        # Add extra context if provided
        if extra_context:
            # Create an extended result with all the fields from the base result
            extended_result: ExtendedBetResult = {
                "type": result["type"],
                "profit_scenarios": result["profit_scenarios"],
                "min_profit": result["min_profit"],
                "is_profitable": result["is_profitable"],
                "lay_stakes": result["lay_stakes"],
                "stake": result["stake"],
                "commission": result["commission"],
                "back_commission": result["back_commission"]
            }
            
            # Add the extra context fields
            for key, value in extra_context.items():
                if key in ExtendedBetResult.__annotations__:
                    extended_result[key] = value
                else:
                    logger.warning(f"Skipping extra context key {key} as it's not defined in ExtendedBetResult")
            
            logger.debug(f"Full result with extra context: {extended_result}")
            return extended_result
        
        logger.debug(f"Full result: {result}")
        return result

    #############################################################################
    # TEMPLATE METHODS FOR BINARY AND MULTI-OUTCOME BETS
    #############################################################################

    @staticmethod
    def _calculate_binary_outcome_bet(
        bet_type: str,
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Template method for calculating binary outcome bets.
        
        Args:
            bet_type: The type of bet
            back_odds_yes: The back odds for the "Yes" outcome
            lay_odds_yes: The lay odds for the "Yes" outcome
            back_odds_no: The back odds for the "No" outcome
            lay_odds_no: The lay odds for the "No" outcome
            stake: The back stake amount
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
        """
        # Log inputs
        logger.debug(f"Binary outcome bet calculation for {bet_type}: back_odds_yes={back_odds_yes}, "
                     f"lay_odds_yes={lay_odds_yes}, back_odds_no={back_odds_no}, lay_odds_no={lay_odds_no}, "
                     f"stake={stake}, commission={commission}, back_commission={back_commission}")
        
        # Validate inputs
        inputs = {
            'back_odds_yes': back_odds_yes,
            'lay_odds_yes': lay_odds_yes,
            'back_odds_no': back_odds_no,
            'lay_odds_no': lay_odds_no,
            'stake': stake,
            'commission': commission,
            'back_commission': back_commission
        }
        
        StrategyCalculators.validate_inputs(
            inputs,
            ['back_odds_yes', 'lay_odds_yes', 'back_odds_no', 'lay_odds_no', 'stake', 'commission', 'back_commission'],
            {
                'back_odds_yes': (int, float, Decimal),
                'lay_odds_yes': (int, float, Decimal),
                'back_odds_no': (int, float, Decimal),
                'lay_odds_no': (int, float, Decimal),
                'stake': (int, float, Decimal),
                'commission': (int, float, Decimal),
                'back_commission': (int, float, Decimal)
            }
        )
        
        # Convert to Decimal
        stake_decimal = Decimal(str(inputs['stake'])) if not isinstance(inputs['stake'], Decimal) else inputs['stake']
        commission_decimal = Decimal(str(inputs['commission'])) if not isinstance(inputs['commission'], Decimal) else inputs['commission']
        back_commission_decimal = Decimal(str(inputs['back_commission'])) if not isinstance(inputs['back_commission'], Decimal) else inputs['back_commission']
        back_odds_yes_decimal = Decimal(str(inputs['back_odds_yes'])) if not isinstance(inputs['back_odds_yes'], Decimal) else inputs['back_odds_yes']
        lay_odds_yes_decimal = Decimal(str(inputs['lay_odds_yes'])) if not isinstance(inputs['lay_odds_yes'], Decimal) else inputs['lay_odds_yes']
        back_odds_no_decimal = Decimal(str(inputs['back_odds_no'])) if not isinstance(inputs['back_odds_no'], Decimal) else inputs['back_odds_no']
        lay_odds_no_decimal = Decimal(str(inputs['lay_odds_no'])) if not isinstance(inputs['lay_odds_no'], Decimal) else inputs['lay_odds_no']
        
        # Calculate lay stakes
        lay_stake_yes = StrategyCalculators.calculate_lay_stake(
            stake=stake_decimal,
            back_odds=back_odds_yes_decimal,
            lay_odds=lay_odds_yes_decimal,
            commission=commission_decimal
        )
        
        lay_stake_no = StrategyCalculators.calculate_lay_stake(
            stake=stake_decimal,
            back_odds=back_odds_no_decimal,
            lay_odds=lay_odds_no_decimal,
            commission=commission_decimal
        )
        
        # Create odds and lay stakes dictionaries
        back_odds_dict = {'yes': back_odds_yes_decimal, 'no': back_odds_no_decimal}
        lay_odds_dict = {'yes': lay_odds_yes_decimal, 'no': lay_odds_no_decimal}
        lay_stakes = {'yes': lay_stake_yes, 'no': lay_stake_no}
        
        # Calculate profit scenarios
        profit_scenarios = StrategyCalculators.calculate_profit_scenarios(
            stake=stake_decimal,back_odds_dict=back_odds_dict,lay_odds_dict=lay_odds_dict,
            lay_stakes=lay_stakes,
            commission=commission_decimal,
            back_commission=back_commission_decimal
        )
        
        # Create standard result
        result = StrategyCalculators.create_standard_result(
            bet_type=bet_type,
            profit_scenarios=profit_scenarios,
            lay_stakes=lay_stakes,
            stake=stake_decimal,
            commission=commission_decimal,
            back_commission=back_commission_decimal
        )
        
        return result
    
    @staticmethod
    def _calculate_multi_outcome_bet(
        bet_type: str,
        back_odds_dict: Dict[str, Union[int, float, Decimal]],
        lay_odds_dict: Dict[str, Union[int, float, Decimal]],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Template method for calculating multi-outcome bets.
        
        Args:
            bet_type: The type of bet
            back_odds: Dictionary mapping scenario names to back odds
            lay_odds: Dictionary mapping scenario names to lay odds
            stake: The back stake amount
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
        """
        # Log inputs
        logger.debug(f"Multi-outcome bet calculation for {bet_type}: "
                     f"stake={stake}, commission={commission}, "
                     f"back_commission={back_commission}")
        
        # Validate inputs
        inputs = {
            'back_odds_dict': back_odds_dict,
            'lay_odds_dict': lay_odds_dict,
            'stake': stake,
            'commission': commission,
            'back_commission': back_commission
        }
        
        StrategyCalculators.validate_inputs(
            inputs,
            ['back_odds_dict', 'lay_odds_dict', 'stake', 'commission', 'back_commission'],
            {
                'back_odds_dict': (dict,),
                'lay_odds_dict': (dict,),
                'stake': (int, float, Decimal),
                'commission': (int, float, Decimal),
                'back_commission': (int, float, Decimal)
            }
        )
        
        # Verify dictionaries have matching keys
        if set(inputs['back_odds_dict'].keys()) != set(inputs['lay_odds_dict'].keys()):
            error_msg = "Back odds_dict and lay odds_dict dictionaries must have the same keys"
            logger.error(error_msg)
            raise InvalidInputError(error_msg)
            
        # Convert to Decimal
        stake_decimal = Decimal(str(inputs['stake'])) if not isinstance(inputs['stake'], Decimal) else inputs['stake']
        commission_decimal = Decimal(str(inputs['commission'])) if not isinstance(inputs['commission'], Decimal) else inputs['commission']
        back_commission_decimal = Decimal(str(inputs['back_commission'])) if not isinstance(inputs['back_commission'], Decimal) else inputs['back_commission']
        
        # Convert odds to Decimal
        back_odds_dict = {k: Decimal(str(v)) if not isinstance(v, Decimal) else v for k, v in inputs['back_odds_dict'].items()}
        lay_odds_dict = {k: Decimal(str(v)) if not isinstance(v, Decimal) else v for k, v in inputs['lay_odds_dict'].items()}
        
        # Calculate lay stakes
        lay_stakes = {}
        for scenario in back_odds_dict.keys():
            lay_stakes[scenario] = StrategyCalculators.calculate_lay_stake(
                stake=stake_decimal,
                back_odds=back_odds_dict[scenario],
                lay_odds=lay_odds_dict[scenario],
                commission=commission_decimal
            )
        
        # Calculate profit scenarios
        profit_scenarios = StrategyCalculators.calculate_profit_scenarios(
            stake=stake_decimal,back_odds_dict=back_odds_dict,lay_odds_dict=lay_odds_dict,
            lay_stakes=lay_stakes,
            commission=commission_decimal,
            back_commission=back_commission_decimal
        )
        
        # Create standard result
        result = StrategyCalculators.create_standard_result(
            bet_type=bet_type,
            profit_scenarios=profit_scenarios,
            lay_stakes=lay_stakes,
            stake=stake_decimal,
            commission=commission_decimal,
            back_commission=back_commission_decimal
        )
        
        return result

    ##########################################################################
    # MATCH OUTCOME BET CALCULATORS (1X2, DOUBLE CHANCE, DRAW NO BET, ETC.)  
    ##########################################################################
    
    @staticmethod
    def calculate_match_result_1x2(
        back_odds_home: Union[int, float, Decimal],
        lay_odds_home: Union[int, float, Decimal],
        back_odds_draw: Union[int, float, Decimal],
        lay_odds_draw: Union[int, float, Decimal],
        back_odds_away: Union[int, float, Decimal],
        lay_odds_away: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for 1X2 (home-draw-away) markets.
        
        Args:
            back_odds_home: The back odds for home win
            lay_odds_home: The lay odds for home win
            back_odds_draw: The back odds for draw
            lay_odds_draw: The lay odds for draw
            back_odds_away: The back odds for away win
            lay_odds_away: The lay odds for away win
            stake: The back stake amount
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
        """
        # Set up scenario dictionaries
        back_odds = {
            'home': back_odds_home,
            'draw': back_odds_draw,
            'away': back_odds_away
        }
        
        lay_odds = {
            'home': lay_odds_home,
            'draw': lay_odds_draw,
            'away': lay_odds_away
        }
        
        # Use multi-outcome template method
        return StrategyCalculators._calculate_multi_outcome_bet(
            bet_type='Match Result 1X2',
            back_odds_dict=back_odds,
            lay_odds_dict=lay_odds,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    
    @staticmethod
    def calculate_double_chance(
        back_odds_home_draw: Union[int, float, Decimal],
        lay_odds_home_draw: Union[int, float, Decimal],
        back_odds_draw_away: Union[int, float, Decimal],
        lay_odds_draw_away: Union[int, float, Decimal],
        back_odds_home_away: Union[int, float, Decimal],
        lay_odds_home_away: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Double Chance markets.
        
        Args:
            back_odds_home_draw: The back odds for home or draw
            lay_odds_home_draw: The lay odds for home or draw
            back_odds_draw_away: The back odds for draw or away
            lay_odds_draw_away: The lay odds for draw or away
            back_odds_home_away: The back odds for home or away
            lay_odds_home_away: The lay odds for home or away
            stake: The back stake amount
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
        """
        # Set up scenario dictionaries
        back_odds = {
            'home_draw': back_odds_home_draw,
            'draw_away': back_odds_draw_away,
            'home_away': back_odds_home_away
        }
        
        lay_odds = {
            'home_draw': lay_odds_home_draw,
            'draw_away': lay_odds_draw_away,
            'home_away': lay_odds_home_away
        }
        
        # Use multi-outcome template method
        return StrategyCalculators._calculate_multi_outcome_bet(
            bet_type='Double Chance',
            back_odds_dict=back_odds,
            lay_odds_dict=lay_odds,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    
    @staticmethod
    def calculate_draw_no_bet(
        back_odds_home: Union[int, float, Decimal],
        lay_odds_home: Union[int, float, Decimal],
        back_odds_away: Union[int, float, Decimal],
        lay_odds_away: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Draw No Bet markets.
        
        Args:
            back_odds_home: The back odds for home win
            lay_odds_home: The lay odds for home win
            back_odds_away: The back odds for away win
            lay_odds_away: The lay odds for away win
            stake: The back stake amount
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
        """
        # Set up scenario dictionaries
        back_odds = {
            'home': back_odds_home,
            'away': back_odds_away
        }
        
        lay_odds = {
            'home': lay_odds_home,
            'away': lay_odds_away
        }
        
        # Use multi-outcome template method
        return StrategyCalculators._calculate_multi_outcome_bet(
            bet_type='Draw No Bet',
            back_odds_dict=back_odds,
            lay_odds_dict=lay_odds,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    
    @staticmethod
    def calculate_asian_handicap(
        back_odds_home: Union[int, float, Decimal],
        lay_odds_home: Union[int, float, Decimal],
        back_odds_away: Union[int, float, Decimal],
        lay_odds_away: Union[int, float, Decimal],
        handicap: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Asian Handicap markets.
        
        Args:
            back_odds_home: The back odds for home win with handicap
            lay_odds_home: The lay odds for home win with handicap
            back_odds_away: The back odds for away win with handicap
            lay_odds_away: The lay odds for away win with handicap
            handicap: The handicap value (e.g., -0.5, +1.5)
            stake: The back stake amount
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
        """
        # Set up scenario dictionaries
        back_odds = {
            'home': back_odds_home,
            'away': back_odds_away
        }
        
        lay_odds = {
            'home': lay_odds_home,
            'away': lay_odds_away
        }
        
        # Additional context
        extra_context = {
            'handicap': Decimal(str(handicap)) if not isinstance(handicap, Decimal) else handicap
        }
        
        # Use multi-outcome template method
        base_result = StrategyCalculators._calculate_multi_outcome_bet(
            bet_type=f'Asian Handicap ({handicap:+g})',
            back_odds_dict=back_odds,
            lay_odds_dict=lay_odds,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
        
        # Create a proper ExtendedBetResult with the extra context
        result = StrategyCalculators.create_standard_result(
            base_result['type'],
            base_result['profit_scenarios'],
            base_result['lay_stakes'],
            base_result['stake'],
            base_result['commission'],
            base_result['back_commission'],
            extra_context
        )
        
        return result
    
    @staticmethod
    def calculate_win_to_nil(
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        team: str,
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Win to Nil markets.
        
        Args:
            back_odds_yes: The back odds for team to win to nil
            lay_odds_yes: The lay odds for team to win to nil
            back_odds_no: The back odds for team not to win to nil
            lay_odds_no: The lay odds for team not to win to nil
            team: The team name ('home' or 'away')
            stake: The back stake amount
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            UnsupportedMarketError: If team is not 'home' or 'away'
        """
        # Validate team
        if team.lower() not in ['home', 'away']:
            error_msg = f"Team must be 'home' or 'away', got {team}"
            logger.error(error_msg)
            raise UnsupportedMarketError(error_msg)
        
        # Create team field for extra context
        extra_context = {
            'team': team.lower()
        }

        # Use binary outcome template method to get base result
        base_result = StrategyCalculators._calculate_binary_outcome_bet(
            bet_type=f'{team.capitalize()} Win to Nil',
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
        
        # Create extended result with the team field
        result = StrategyCalculators.create_standard_result(
            base_result['type'],
            base_result['profit_scenarios'],
            base_result['lay_stakes'],
            base_result['stake'],
            base_result['commission'],
            base_result['back_commission'],
            extra_context
        )
        
        return result

    ###################################################
    # GOALS BET CALCULATORS (BTTS, OVER/UNDER, ETC.)  
    ###################################################
    
    @staticmethod
    def calculate_btts_yes_no(
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Both Teams to Score markets.
        
        Args:
            back_odds_yes: The back odds for both teams to score (yes)
            lay_odds_yes: The lay odds for both teams to score (yes)
            back_odds_no: The back odds for both teams not to score (no)
            lay_odds_no: The lay odds for both teams not to score (no)
            stake: The back stake amount
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
        """
        # Use binary outcome template method
        return StrategyCalculators._calculate_binary_outcome_bet(
            bet_type='Both Teams to Score',
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    
    @staticmethod
    def calculate_over_under_goals(
        back_odds_over: Union[int, float, Decimal],
        lay_odds_over: Union[int, float, Decimal],
        back_odds_under: Union[int, float, Decimal],
        lay_odds_under: Union[int, float, Decimal],
        goal_line: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Over/Under Goals markets.
        
        Args:
            back_odds_over: The back odds for over goal line
            lay_odds_over: The lay odds for over goal line
            back_odds_under: The back odds for under goal line
            lay_odds_under: The lay odds for under goal line
            goal_line: The goal line (e.g., 2.5)
            stake: The back stake amount
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
        """
        # Validate goal line
        if not isinstance(goal_line, (int, float, Decimal)):
            error_msg = f"Goal line must be numeric, got {type(goal_line)}"
            logger.error(error_msg)
            raise InvalidInputError(error_msg)
        
        goal_line_decimal = Decimal(str(goal_line)) if not isinstance(goal_line, Decimal) else goal_line
        
        # Create extra context with goal line
        extra_context = {
            'goal_line': goal_line_decimal
        }
        
        # Use binary outcome template method to get base result
        base_result = StrategyCalculators._calculate_binary_outcome_bet(
            bet_type=f'Over/Under {goal_line_decimal} Goals',
            back_odds_yes=back_odds_over,
            lay_odds_yes=lay_odds_over,
            back_odds_no=back_odds_under,
            lay_odds_no=lay_odds_under,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
        
        # Create extended result with the goal line field
        result = StrategyCalculators.create_standard_result(
            base_result['type'],
            base_result['profit_scenarios'],
            base_result['lay_stakes'],
            base_result['stake'],
            base_result['commission'],
            base_result['back_commission'],
            extra_context
        )
        
        return result
    
    @staticmethod
    def calculate_over_goals(
        back_odds_over: Union[int, float, Decimal],
        lay_odds_over: Union[int, float, Decimal],
        back_odds_under: Union[int, float, Decimal],
        lay_odds_under: Union[int, float, Decimal],
        goal_line: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Over X.5 Goals markets.
        
        Args:
            back_odds_over: The back odds for over goal line
            lay_odds_over: The lay odds for over goal line
            back_odds_under: The back odds for under goal line
            lay_odds_under: The lay odds for under goal line
            goal_line: The goal line (e.g., 2.5)
            stake: The back stake amount
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
        """
        # Validate goal line
        if not isinstance(goal_line, (int, float, Decimal)):
            error_msg = f"Goal line must be numeric, got {type(goal_line)}"
            logger.error(error_msg)
            raise InvalidInputError(error_msg)
        
        goal_line_decimal = Decimal(str(goal_line)) if not isinstance(goal_line, Decimal) else goal_line
        
        # Create extra context with goal line
        extra_context = {
            'goal_line': goal_line_decimal
        }
        
        # Use binary outcome template method to get base result
        base_result = StrategyCalculators._calculate_binary_outcome_bet(
            bet_type=f'Over {goal_line_decimal} Goals',
            back_odds_yes=back_odds_over,
            lay_odds_yes=lay_odds_over,
            back_odds_no=back_odds_under,
            lay_odds_no=lay_odds_under,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
        
        # Create extended result with the goal line field
        result = StrategyCalculators.create_standard_result(
            base_result['type'],
            base_result['profit_scenarios'],
            base_result['lay_stakes'],
            base_result['stake'],
            base_result['commission'],
            base_result['back_commission'],
            extra_context
        )
        
        return result
    
    @staticmethod
    def calculate_under_goals(
        back_odds_under: Union[int, float, Decimal],
        lay_odds_under: Union[int, float, Decimal],
        back_odds_over: Union[int, float, Decimal],
        lay_odds_over: Union[int, float, Decimal],
        goal_line: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Under X.5 Goals markets.
        
        Args:
            back_odds_under: The back odds for under goal line
            lay_odds_under: The lay odds for under goal line
            back_odds_over: The back odds for over goal line
            lay_odds_over: The lay odds for over goal line
            goal_line: The goal line (e.g., 2.5)
            stake: The back stake amount
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
        """
        # Validate goal line
        if not isinstance(goal_line, (int, float, Decimal)):
            error_msg = f"Goal line must be numeric, got {type(goal_line)}"
            logger.error(error_msg)
            raise InvalidInputError(error_msg)
        
        goal_line_decimal = Decimal(str(goal_line)) if not isinstance(goal_line, Decimal) else goal_line
        
        # Create extra context with goal line
        extra_context = {
            'goal_line': goal_line_decimal
        }
        
        # Use binary outcome template method to get base result
        base_result = StrategyCalculators._calculate_binary_outcome_bet(
            bet_type=f'Under {goal_line_decimal} Goals',
            back_odds_yes=back_odds_under,
            lay_odds_yes=lay_odds_under,
            back_odds_no=back_odds_over,
            lay_odds_no=lay_odds_over,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
        
        # Create extended result with the goal line field
        result = StrategyCalculators.create_standard_result(
            base_result['type'],
            base_result['profit_scenarios'],
            base_result['lay_stakes'],
            base_result['stake'],
            base_result['commission'],
            base_result['back_commission'],
            extra_context
        )
        
        return result
    
    @staticmethod
    def calculate_btts_first_half(
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Both Teams to Score in First Half markets.
        
        Args:
            back_odds_yes: The back odds for both teams to score in first half (yes)
            lay_odds_yes: The lay odds for both teams to score in first half (yes)
            back_odds_no: The back odds for both teams not to score in first half (no)
            lay_odds_no: The lay odds for both teams not to score in first half (no)
            stake: The back stake amount
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
        """
        # Use binary outcome template method
        return StrategyCalculators._calculate_binary_outcome_bet(
            bet_type='Both Teams to Score First Half',
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    
    @staticmethod
    def calculate_btts_second_half(
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Both Teams to Score in Second Half markets.
        
        Args:
            back_odds_yes: The back odds for both teams to score in second half (yes)
            lay_odds_yes: The lay odds for both teams to score in second half (yes)
            back_odds_no: The back odds for both teams not to score in second half (no)
            lay_odds_no: The lay odds for both teams not to score in second half (no)
            stake: The back stake amount
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
        """
        # Use binary outcome template method
        return StrategyCalculators._calculate_binary_outcome_bet(
            bet_type='Both Teams to Score Second Half',
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )

    @staticmethod
    def calculate_team_to_score(
        team: str,
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Team to Score markets.
        
        Args:
            team: The team name ('home' or 'away')
            back_odds_yes: The back odds for team to score (yes)
            lay_odds_yes: The lay odds for team to score (yes)
            back_odds_no: The back odds for team not to score (no)
            lay_odds_no: The lay odds for team not to score (no)
            stake: The back stake amount
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            UnsupportedMarketError: If team is not 'home' or 'away'
        """
        # Validate team
        if team.lower() not in ['home', 'away']:
            error_msg = f"Team must be 'home' or 'away', got {team}"
            logger.error(error_msg)
            raise UnsupportedMarketError(error_msg)
        
        # Create extra context with team
        extra_context = {
            'team': team.lower()
        }
        
        # Use binary outcome template method to get base result
        base_result = StrategyCalculators._calculate_binary_outcome_bet(
            bet_type=f'{team.capitalize()} Team to Score',
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
        
        # Create extended result with the team field
        result = StrategyCalculators.create_standard_result(
            base_result['type'],
            base_result['profit_scenarios'],
            base_result['lay_stakes'],
            base_result['stake'],
            base_result['commission'],
            base_result['back_commission'],
            extra_context
        )
        
        return result

    #######################################################
    # SCORE BET CALCULATORS (CORRECT SCORE, HT/FT, ETC.)  
    #######################################################
    
    @staticmethod
    def calculate_correct_score(
        score: str,
        back_odds: Union[int, float, Decimal],
        lay_odds: Union[int, float, Decimal],
        other_back_odds: Dict[str, Union[int, float, Decimal]],
        other_lay_odds: Dict[str, Union[int, float, Decimal]],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Correct Score markets.
        
        Args:
            score: The score format (e.g., '1-0', '2-2')
            back_odds: The back odds for this correct score
            lay_odds: The lay odds for this correct score
            other_back_odds: Dictionary mapping other scores to back odds
            other_lay_odds: Dictionary mapping other scores to lay odds
            stake: The back stake amount
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
        """
        # Validate score format
        if not isinstance(score, str) or '-' not in score:
            error_msg = f"Score must be in format '1-0', got {score}"
            logger.error(error_msg)
            raise InvalidInputError(error_msg)
        
        # Create extra context with score
        extra_context = {
            'score': score
        }
        
        # Combine all scores
        all_back_odds = {**{score: back_odds}, **other_back_odds}
        all_lay_odds = {**{score: lay_odds}, **other_lay_odds}
        
        # Use multi-outcome template method to get base result
        base_result = StrategyCalculators._calculate_multi_outcome_bet(

            bet_type=f'Correct Score {score}',

            back_odds_dict=all_back_odds,

            lay_odds_dict=all_lay_odds,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
        
        # Create extended result with the score field
        result = StrategyCalculators.create_standard_result(
            base_result['type'],
            base_result['profit_scenarios'],
            base_result['lay_stakes'],
            base_result['stake'],
            base_result['commission'],
            base_result['back_commission'],
            extra_context
        )
        
        return result
    
    @staticmethod
    def calculate_half_time_full_time(
        result: str,
        back_odds: Union[int, float, Decimal],
        lay_odds: Union[int, float, Decimal],
        other_back_odds: Dict[str, Union[int, float, Decimal]],
        other_lay_odds: Dict[str, Union[int, float, Decimal]],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Half-Time/Full-Time markets.
        
        Args:
            result: The HT/FT result format (e.g., 'Home/Home', 'Draw/Away')
            back_odds: The back odds for this HT/FT result
            lay_odds: The lay odds for this HT/FT result
            other_back_odds: Dictionary mapping other results to back odds
            other_lay_odds: Dictionary mapping other results to lay odds
            stake: The back stake amount
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
        """
        # Validate result format
        if not isinstance(result, str) or '/' not in result:
            error_msg = f"Result must be in format 'Home/Away', got {result}"
            logger.error(error_msg)
            raise InvalidInputError(error_msg)
        
        # Create extra context with HT/FT result
        extra_context = {
            'ht_ft_result': result
        }
        
        # Combine all results
        all_back_odds = {**{result: back_odds}, **other_back_odds}
        all_lay_odds = {**{result: lay_odds}, **other_lay_odds}
        
        # Use multi-outcome template method to get base result
        base_result = StrategyCalculators._calculate_multi_outcome_bet(

            bet_type=f'Half-Time/Full-Time {result}',

            back_odds_dict=all_back_odds,

            lay_odds_dict=all_lay_odds,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
        
        # Create extended result with the ht_ft_result field
        result_obj = StrategyCalculators.create_standard_result(
            base_result['type'],
            base_result['profit_scenarios'],
            base_result['lay_stakes'],
            base_result['stake'],
            base_result['commission'],
            base_result['back_commission'],
            extra_context
        )
        
        return result_obj
    
    @staticmethod
    def calculate_half_time_result(
        back_odds_home: Union[int, float, Decimal],
        lay_odds_home: Union[int, float, Decimal],
        back_odds_draw: Union[int, float, Decimal],
        lay_odds_draw: Union[int, float, Decimal],
        back_odds_away: Union[int, float, Decimal],
        lay_odds_away: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Half-Time Result markets.
        
        Args:
            back_odds_home: The back odds for home win at half-time
            lay_odds_home: The lay odds for home win at half-time
            back_odds_draw: The back odds for draw at half-time
            lay_odds_draw: The lay odds for draw at half-time
            back_odds_away: The back odds for away win at half-time
            lay_odds_away: The lay odds for away win at half-time
            stake: The back stake amount
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
        """
        # Set up scenario dictionaries
        back_odds = {
            'home': back_odds_home,
            'draw': back_odds_draw,
            'away': back_odds_away
        }
        
        lay_odds = {
            'home': lay_odds_home,
            'draw': lay_odds_draw,
            'away': lay_odds_away
        }
        
        # Use multi-outcome template method
        return StrategyCalculators._calculate_multi_outcome_bet(
            bet_type='Half-Time Result',
            back_odds_dict=back_odds,
            lay_odds_dict=lay_odds,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )

    ##########################################################
    # PLAYER-SPECIFIC BET CALCULATORS (GOALSCORER, ETC.)     
    ##########################################################
    
    @staticmethod
    def calculate_first_goalscorer(
        player: str,
        back_odds: Union[int, float, Decimal],
        lay_odds: Union[int, float, Decimal],
        other_players_back_odds: Dict[str, Union[int, float, Decimal]],
        other_players_lay_odds: Dict[str, Union[int, float, Decimal]],
        no_goalscorer_back_odds: Union[int, float, Decimal],
        no_goalscorer_lay_odds: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for First Goalscorer markets.
        
        Args:
            player: The player name
            back_odds: The back odds for this player to score first
            lay_odds: The lay odds for this player to score first
            other_players_back_odds: Dictionary mapping other players to back odds
            other_players_lay_odds: Dictionary mapping other players to lay odds
            no_goalscorer_back_odds: The back odds for no goalscorer
            no_goalscorer_lay_odds: The lay odds for no goalscorer
            stake: The back stake amount
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
        """
        # Validate player
        if not isinstance(player, str) or not player:
            error_msg = f"Player must be a non-empty string, got {player}"
            logger.error(error_msg)
            raise InvalidInputError(error_msg)
        
        # Create extra context with player
        extra_context = {
            'player': player
        }
        
        # Combine all players and no goalscorer
        all_back_odds = {
            **{player: back_odds},
            **other_players_back_odds,
            **{'no_goalscorer': no_goalscorer_back_odds}
        }
        
        all_lay_odds = {
            **{player: lay_odds},
            **other_players_lay_odds,
            **{'no_goalscorer': no_goalscorer_lay_odds}
        }
        
        # Use multi-outcome template method to get base result
        base_result = StrategyCalculators._calculate_multi_outcome_bet(

            bet_type=f'First Goalscorer {player}',

            back_odds_dict=all_back_odds,

            lay_odds_dict=all_lay_odds,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
        
        # Create extended result with the player field
        result = StrategyCalculators.create_standard_result(
            base_result['type'],
            base_result['profit_scenarios'],
            base_result['lay_stakes'],
            base_result['stake'],
            base_result['commission'],
            base_result['back_commission'],
            extra_context
        )
        
        return result
    
    @staticmethod
    def calculate_anytime_goalscorer(
        player: str,
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Anytime Goalscorer markets.
        
        Args:
            player: The player name
            back_odds_yes: The back odds for player to score
            lay_odds_yes: The lay odds for player to score
            back_odds_no: The back odds for player not to score
            lay_odds_no: The lay odds for player not to score
            stake: The back stake amount
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
        """
        # Validate player
        if not isinstance(player, str) or not player:
            error_msg = f"Player must be a non-empty string, got {player}"
            logger.error(error_msg)
            raise InvalidInputError(error_msg)
        
        # Create extra context with player
        extra_context = {
            'player': player
        }
        
        # Use binary outcome template method to get base result
        base_result = StrategyCalculators._calculate_binary_outcome_bet(
            bet_type=f'Anytime Goalscorer {player}',
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
        
        # Create extended result with the player field
        result = StrategyCalculators.create_standard_result(
            base_result['type'],
            base_result['profit_scenarios'],
            base_result['lay_stakes'],
            base_result['stake'],
            base_result['commission'],
            base_result['back_commission'],
            extra_context
        )
        
        return result

    #################################################
    # SPECIALTY BET CALCULATORS (MISC MARKETS)      
    #################################################
    
    @staticmethod
    def calculate_match_to_go_to_extra_time(
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Match to Go to Extra Time markets.
        
        Args:
            back_odds_yes: The back odds for match to go to extra time
            lay_odds_yes: The lay odds for match to go to extra time
            back_odds_no: The back odds for match not to go to extra time
            lay_odds_no: The lay odds for match not to go to extra time
            stake: The back stake amount
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
        """
        # Use binary outcome template method
        return StrategyCalculators._calculate_binary_outcome_bet(
            bet_type='Match to Go to Extra Time',
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    
    @staticmethod
    def calculate_match_to_go_to_penalties(
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Match to Go to Penalties markets.
        
        Args:
            back_odds_yes: The back odds for match to go to penalties
            lay_odds_yes: The lay odds for match to go to penalties
            back_odds_no: The back odds for match not to go to penalties
            lay_odds_no: The lay odds for match not to go to penalties
            stake: The back stake amount
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
        """
        # Use binary outcome template method
        return StrategyCalculators._calculate_binary_outcome_bet(
            bet_type='Match to Go to Penalties',
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    
    @staticmethod
    def calculate_team_to_score_in_both_halves(
        team: str,
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Team to Score in Both Halves markets.
        
        Args:
            team: The team name ('home' or 'away')
            back_odds_yes: The back odds for team to score in both halves
            lay_odds_yes: The lay odds for team to score in both halves
            back_odds_no: The back odds for team not to score in both halves
            lay_odds_no: The lay odds for team not to score in both halves
            stake: The back stake amount
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            UnsupportedMarketError: If team is not 'home' or 'away'
        """
        # Validate team
        if team.lower() not in ['home', 'away']:
            error_msg = f"Team must be 'home' or 'away', got {team}"
            logger.error(error_msg)
            raise UnsupportedMarketError(error_msg)
        
        # Create extra context with team
        extra_context = {
            'team': team.lower()
        }
        
        # Use binary outcome template method to get base result
        base_result = StrategyCalculators._calculate_binary_outcome_bet(
            bet_type=f'{team.capitalize()} Team to Score in Both Halves',
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
        
        # Create extended result with the team field
        result = StrategyCalculators.create_standard_result(
            base_result['type'],
            base_result['profit_scenarios'],
            base_result['lay_stakes'],
            base_result['stake'],
            base_result['commission'],
            base_result['back_commission'],
            extra_context
        )
        
        return result
    
    # Additional implementations would go here for all 923 bet types.
    # The pattern would be similar, using the template methods and adapting
    # them for the specific market requirements.
    # For brevity, we're showing a subset of the implementations.
    
    @staticmethod
    def calculate_corner_match_result_and_over_under(
        back_odds_dict: Dict[str, Union[int, float, Decimal]],
        lay_odds_dict: Dict[str, Union[int, float, Decimal]],
        stake: Union[int, float, Decimal],
        corner_line: Union[int, float, Decimal] = Decimal('10.5'),
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Corner Match Result and Over/Under markets.
        
        Args:
            back_odds_dict: Dictionary mapping outcomes to back odds
            lay_odds_dict: Dictionary mapping outcomes to lay odds
            stake: The back stake amount
            corner_line: The corner line (default 10.5)
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_corner_match_result_and_over_under(
            ...     back_odds_dict={
            ...         'Home/Over': 3.5, 'Home/Under': 5.0, 
            ...         'Draw/Over': 8.0, 'Draw/Under': 10.0,
            ...         'Away/Over': 4.5, 'Away/Under': 6.0
            ...     },
            ...     lay_odds_dict={
            ...         'Home/Over': 3.7, 'Home/Under': 5.5, 
            ...         'Draw/Over': 8.5, 'Draw/Under': 11.0,
            ...         'Away/Over': 4.8, 'Away/Under': 6.5
            ...     },
            ...     stake=100, corner_line=10.5,
            ...     commission=0.02, back_commission=0.0
            ... )
        """
        # Convert corner_line to Decimal
        corner_line_d = Decimal(str(corner_line)) if not isinstance(corner_line, Decimal) else corner_line
        
        # Create bet type string with corner line
        bet_type = f"Corner Match Result and Over/Under {corner_line_d}"
        
        # Use multi-outcome template
        return StrategyCalculators._calculate_multi_outcome_bet(
            bet_type=bet_type,
            back_odds_dict=back_odds_dict,
            lay_odds_dict=lay_odds_dict,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    
    @staticmethod
    def calculate_player_to_score_anytime(
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        player_name: str = "Player",
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Player to Score Anytime markets.
        
        Args:
            back_odds_yes: The back odds for the player to score anytime
            lay_odds_yes: The lay odds for the player to score anytime
            back_odds_no: The back odds for the player not to score
            lay_odds_no: The lay odds for the player not to score
            stake: The back stake amount
            player_name: The name of the player (default "Player")
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_player_to_score_anytime(
            ...     back_odds_yes=2.5, lay_odds_yes=2.7,
            ...     back_odds_no=1.5, lay_odds_no=1.6,
            ...     stake=100, player_name="Harry Kane",
            ...     commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string with player name
        bet_type = f"{player_name} to Score Anytime"
        
        # Use binary outcome template
        return StrategyCalculators._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    
    @staticmethod
    def calculate_player_to_score_first(
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        player_name: str = "Player",
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Player to Score First markets.
        
        Args:
            back_odds_yes: The back odds for the player to score first
            lay_odds_yes: The lay odds for the player to score first
            back_odds_no: The back odds for the player not to score first
            lay_odds_no: The lay odds for the player not to score first
            stake: The back stake amount
            player_name: The name of the player (default "Player")
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_player_to_score_first(
            ...     back_odds_yes=6.0, lay_odds_yes=6.5,
            ...     back_odds_no=1.2, lay_odds_no=1.25,
            ...     stake=100, player_name="Mohamed Salah",
            ...     commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string with player name
        bet_type = f"{player_name} to Score First"
        
        # Use binary outcome template
        return StrategyCalculators._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    
    @staticmethod
    def calculate_player_to_score_last(
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        player_name: str = "Player",
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Player to Score Last markets.
        
        Args:
            back_odds_yes: The back odds for the player to score last
            lay_odds_yes: The lay odds for the player to score last
            back_odds_no: The back odds for the player not to score last
            lay_odds_no: The lay odds for the player not to score last
            stake: The back stake amount
            player_name: The name of the player (default "Player")
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_player_to_score_last(
            ...     back_odds_yes=6.0, lay_odds_yes=6.5,
            ...     back_odds_no=1.2, lay_odds_no=1.25,
            ...     stake=100, player_name="Cristiano Ronaldo",
            ...     commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string with player name
        bet_type = f"{player_name} to Score Last"
        
        # Use binary outcome template
        return StrategyCalculators._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    
    @staticmethod
    def calculate_player_to_score_two_or_more(
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        player_name: str = "Player",
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Player to Score Two or More markets.
        
        Args:
            back_odds_yes: The back odds for the player to score two or more goals
            lay_odds_yes: The lay odds for the player to score two or more goals
            back_odds_no: The back odds for the player to score fewer than two goals
            lay_odds_no: The lay odds for the player to score fewer than two goals
            stake: The back stake amount
            player_name: The name of the player (default "Player")
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_player_to_score_two_or_more(
            ...     back_odds_yes=7.0, lay_odds_yes=7.5,
            ...     back_odds_no=1.1, lay_odds_no=1.15,
            ...     stake=100, player_name="Robert Lewandowski",
            ...     commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string with player name
        bet_type = f"{player_name} to Score Two or More"
        
        # Use binary outcome template
        return StrategyCalculators._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    
    @staticmethod
    def calculate_player_to_score_hat_trick(
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        player_name: str = "Player",
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Player to Score Hat-Trick markets.
        
        Args:
            back_odds_yes: The back odds for the player to score a hat-trick
            lay_odds_yes: The lay odds for the player to score a hat-trick
            back_odds_no: The back odds for the player not to score a hat-trick
            lay_odds_no: The lay odds for the player not to score a hat-trick
            stake: The back stake amount
            player_name: The name of the player (default "Player")
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_player_to_score_hat_trick(
            ...     back_odds_yes=21.0, lay_odds_yes=25.0,
            ...     back_odds_no=1.01, lay_odds_no=1.02,
            ...     stake=100, player_name="Erling Haaland",
            ...     commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string with player name
        bet_type = f"{player_name} to Score Hat-Trick"
        
        # Use binary outcome template
        return StrategyCalculators._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    
    @staticmethod
    def calculate_player_to_be_booked(
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        player_name: str = "Player",
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Player to Be Booked markets.
        
        Args:
            back_odds_yes: The back odds for the player to be booked
            lay_odds_yes: The lay odds for the player to be booked
            back_odds_no: The back odds for the player not to be booked
            lay_odds_no: The lay odds for the player not to be booked
            stake: The back stake amount
            player_name: The name of the player (default "Player")
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_player_to_be_booked(
            ...     back_odds_yes=2.5, lay_odds_yes=2.7,
            ...     back_odds_no=1.5, lay_odds_no=1.6,
            ...     stake=100, player_name="Sergio Ramos",
            ...     commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string with player name
        bet_type = f"{player_name} to Be Booked"
        
        # Use binary outcome template
        return StrategyCalculators._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    
    @staticmethod
    def calculate_player_to_be_sent_off_alternate(
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        player_name: str = "Player",
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Player to Be Sent Off markets.
        
        Args:
            back_odds_yes: The back odds for the player to be sent off
            lay_odds_yes: The lay odds for the player to be sent off
            back_odds_no: The back odds for the player not to be sent off
            lay_odds_no: The lay odds for the player not to be sent off
            stake: The back stake amount
            player_name: The name of the player (default "Player")
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_player_to_be_sent_off_alternate(
            ...     back_odds_yes=8.0, lay_odds_yes=8.5,
            ...     back_odds_no=1.1, lay_odds_no=1.15,
            ...     stake=100, player_name="Pepe",
            ...     commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string with player name
        bet_type = f"{player_name} to Be Sent Off"
        
        # Use binary outcome template
        return StrategyCalculators._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    
    @staticmethod
    def calculate_player_shots_on_target(
        back_odds_dict: Dict[str, Union[int, float, Decimal]],
        lay_odds_dict: Dict[str, Union[int, float, Decimal]],
        stake: Union[int, float, Decimal],
        player_name: str = "Player",
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Player Shots on Target markets.
        
        Args:
            back_odds_dict: Dictionary mapping outcomes to back odds (e.g., '0', '1', '2+')
            lay_odds_dict: Dictionary mapping outcomes to lay odds
            stake: The back stake amount
            player_name: The name of the player (default "Player")
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_player_shots_on_target(
            ...     back_odds_dict={'0': 3.0, '1': 2.5, '2+': 2.2},
            ...     lay_odds_dict={'0': 3.2, '1': 2.7, '2+': 2.4},
            ...     stake=100, player_name="Kevin De Bruyne",
            ...     commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string with player name
        bet_type = f"{player_name} Shots on Target"
        
        # Use multi-outcome template
        return StrategyCalculators._calculate_multi_outcome_bet(
            bet_type=bet_type,
            back_odds_dict=back_odds_dict,
            lay_odds_dict=lay_odds_dict,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    
    @staticmethod
    def calculate_player_to_score_and_assist(
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        player_name: str = "Player",
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Player to Score and Assist markets.
        
        Args:
            back_odds_yes: The back odds for the player to score and assist
            lay_odds_yes: The lay odds for the player to score and assist
            back_odds_no: The back odds for the player not to score and assist
            lay_odds_no: The lay odds for the player not to score and assist
            stake: The back stake amount
            player_name: The name of the player (default "Player")
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_player_to_score_and_assist(
            ...     back_odds_yes=10.0, lay_odds_yes=11.0,
            ...     back_odds_no=1.05, lay_odds_no=1.1,
            ...     stake=100, player_name="Bruno Fernandes",
            ...     commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string with player name
        bet_type = f"{player_name} to Score and Assist"
        
        # Use binary outcome template
        return StrategyCalculators._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
        
    @staticmethod
    def calculate_player_to_score_outside_box(
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        player_name: str = "Player",
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Player to Score from Outside the Box markets.
        
        Args:
            back_odds_yes: The back odds for the player to score from outside the box
            lay_odds_yes: The lay odds for the player to score from outside the box
            back_odds_no: The back odds for the player not to score from outside the box
            lay_odds_no: The lay odds for the player not to score from outside the box
            stake: The back stake amount
            player_name: The name of the player (default "Player")
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_player_to_score_outside_box(
            ...     back_odds_yes=12.0, lay_odds_yes=13.0,
            ...     back_odds_no=1.05, lay_odds_no=1.1,
            ...     stake=100, player_name="James Ward-Prowse",
            ...     commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string with player name
        bet_type = f"{player_name} to Score from Outside the Box"
        
        # Use binary outcome template
        return StrategyCalculators._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    
    @staticmethod
    def calculate_player_to_score_header(
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        player_name: str = "Player",
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Player to Score a Header markets.
        
        Args:
            back_odds_yes: The back odds for the player to score a header
            lay_odds_yes: The lay odds for the player to score a header
            back_odds_no: The back odds for the player not to score a header
            lay_odds_no: The lay odds for the player not to score a header
            stake: The back stake amount
            player_name: The name of the player (default "Player")
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_player_to_score_header(
            ...     back_odds_yes=9.0, lay_odds_yes=10.0,
            ...     back_odds_no=1.05, lay_odds_no=1.1,
            ...     stake=100, player_name="Cristiano Ronaldo",
            ...     commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string with player name
        bet_type = f"{player_name} to Score a Header"
        
        # Use binary outcome template
        return StrategyCalculators._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    
    @staticmethod
    def calculate_player_to_score_penalty(
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        player_name: str = "Player",
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Player to Score a Penalty markets.
        
        Args:
            back_odds_yes: The back odds for the player to score a penalty
            lay_odds_yes: The lay odds for the player to score a penalty
            back_odds_no: The back odds for the player not to score a penalty
            lay_odds_no: The lay odds for the player not to score a penalty
            stake: The back stake amount
            player_name: The name of the player (default "Player")
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_player_to_score_penalty(
            ...     back_odds_yes=8.0, lay_odds_yes=8.5,
            ...     back_odds_no=1.1, lay_odds_no=1.15,
            ...     stake=100, player_name="Jorginho",
            ...     commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string with player name
        bet_type = f"{player_name} to Score a Penalty"
        
        # Use binary outcome template
        return StrategyCalculators._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
        
    @staticmethod
    def calculate_player_to_hit_crossbar_or_post(
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        player_name: str = "Player",
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Player to Hit Crossbar/Post markets.
        
        Args:
            back_odds_yes: The back odds for "Yes" outcome
            lay_odds_yes: The lay odds for "Yes" outcome
            back_odds_no: The back odds for "No" outcome
            lay_odds_no: The lay odds for "No" outcome
            stake: The stake amount
            player_name: The name of the player (default "Player")
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_player_to_hit_crossbar_or_post(
            ...     back_odds_yes=7.0, lay_odds_yes=7.5,
            ...     back_odds_no=1.12, lay_odds_no=1.17,
            ...     stake=100, player_name="Kevin De Bruyne",
            ...     commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string with player name
        bet_type = f"{player_name} to Hit Crossbar/Post"
        
        # Use binary outcome template
        return StrategyCalculators._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
        
    @staticmethod
    def calculate_player_to_have_shot_on_target(
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        player_name: str = "Player",
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Player to Have a Shot on Target markets.
        
        Args:
            back_odds_yes: The back odds for "Yes" outcome
            lay_odds_yes: The lay odds for "Yes" outcome
            back_odds_no: The back odds for "No" outcome
            lay_odds_no: The lay odds for "No" outcome
            stake: The stake amount
            player_name: The name of the player (default "Player")
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_player_to_have_shot_on_target(
            ...     back_odds_yes=1.7, lay_odds_yes=1.8,
            ...     back_odds_no=2.1, lay_odds_no=2.2,
            ...     stake=100, player_name="Mohamed Salah",
            ...     commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string with player name
        bet_type = f"{player_name} to Have a Shot on Target"
        
        # Use binary outcome template
        return StrategyCalculators._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
        
    @staticmethod
    def calculate_player_to_assist_anytime(
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        player_name: str = "Player",
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Player to Assist Anytime markets.
        
        Args:
            back_odds_yes: The back odds for "Yes" outcome
            lay_odds_yes: The lay odds for "Yes" outcome
            back_odds_no: The back odds for "No" outcome
            lay_odds_no: The lay odds for "No" outcome
            stake: The stake amount
            player_name: The name of the player (default "Player")
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_player_to_assist_anytime(
            ...     back_odds_yes=3.0, lay_odds_yes=3.2,
            ...     back_odds_no=1.5, lay_odds_no=1.6,
            ...     stake=100, player_name="Bruno Fernandes",
            ...     commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string with player name
        bet_type = f"{player_name} to Assist Anytime"
        
        # Use binary outcome template
        return StrategyCalculators._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
        
    @staticmethod
    def calculate_player_to_assist_first_goal(
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        player_name: str = "Player",
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Player to Assist First Goal markets.
        
        Args:
            back_odds_yes: The back odds for "Yes" outcome
            lay_odds_yes: The lay odds for "Yes" outcome
            back_odds_no: The back odds for "No" outcome
            lay_odds_no: The lay odds for "No" outcome
            stake: The stake amount
            player_name: The name of the player (default "Player")
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_player_to_assist_first_goal(
            ...     back_odds_yes=8.0, lay_odds_yes=8.5,
            ...     back_odds_no=1.1, lay_odds_no=1.15,
            ...     stake=100, player_name="Kevin De Bruyne",
            ...     commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string with player name
        bet_type = f"{player_name} to Assist First Goal"
        
        # Use binary outcome template
        return StrategyCalculators._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
        
    @staticmethod
    def calculate_player_to_score_or_assist(
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        player_name: str = "Player",
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Player to Score or Assist markets.
        
        Args:
            back_odds_yes: The back odds for "Yes" outcome
            lay_odds_yes: The lay odds for "Yes" outcome
            back_odds_no: The back odds for "No" outcome
            lay_odds_no: The lay odds for "No" outcome
            stake: The stake amount
            player_name: The name of the player (default "Player")
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_player_to_score_or_assist(
            ...     back_odds_yes=1.8, lay_odds_yes=1.9,
            ...     back_odds_no=2.0, lay_odds_no=2.1,
            ...     stake=100, player_name="Lionel Messi",
            ...     commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string with player name
        bet_type = f"{player_name} to Score or Assist"
        
        # Use binary outcome template
        return StrategyCalculators._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
        
    @staticmethod
    def calculate_player_shots(
        back_odds_over: Union[int, float, Decimal],
        lay_odds_over: Union[int, float, Decimal],
        back_odds_under: Union[int, float, Decimal],
        lay_odds_under: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        player_name: str = "Player",
        shot_line: Union[int, float, Decimal] = Decimal('2.5'),
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Player Shots markets.
        
        Args:
            back_odds_over: The back odds for "Over" outcome
            lay_odds_over: The lay odds for "Over" outcome
            back_odds_under: The back odds for "Under" outcome
            lay_odds_under: The lay odds for "Under" outcome
            stake: The stake amount
            player_name: The name of the player (default "Player")
            shot_line: The line for over/under (default 2.5)
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_player_shots(
            ...     back_odds_over=1.9, lay_odds_over=2.0,
            ...     back_odds_under=1.9, lay_odds_under=2.0,
            ...     stake=100, player_name="Harry Kane", shot_line=2.5,
            ...     commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string with player name and shot line
        bet_type = f"{player_name} Shots {shot_line}"
        
        # Prepare extra context
        extra_context = {
            'player': player_name,
            'shot_line': Decimal(str(shot_line)) if not isinstance(shot_line, Decimal) else shot_line
        }
        
        # Use binary outcome template
        result = StrategyCalculators._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_over,
            lay_odds_yes=lay_odds_over,
            back_odds_no=back_odds_under,
            lay_odds_no=lay_odds_under,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
        
        # Create a proper ExtendedBetResult with the extra context
        extended_result = StrategyCalculators.create_standard_result(
            result['type'],
            result['profit_scenarios'],
            result['lay_stakes'],
            result['stake'],
            result['commission'],
            result['back_commission'],
            extra_context
        )
        
        return extended_result
        
    @staticmethod
    def calculate_player_to_commit_foul(
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        player_name: str = "Player",
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Player to Commit a Foul markets.
        
        Args:
            back_odds_yes: The back odds for "Yes" outcome
            lay_odds_yes: The lay odds for "Yes" outcome
            back_odds_no: The back odds for "No" outcome
            lay_odds_no: The lay odds for "No" outcome
            stake: The stake amount
            player_name: The name of the player (default "Player")
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_player_to_commit_foul(
            ...     back_odds_yes=1.5, lay_odds_yes=1.6,
            ...     back_odds_no=2.5, lay_odds_no=2.6,
            ...     stake=100, player_name="Sergio Ramos",
            ...     commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string with player name
        bet_type = f"{player_name} to Commit a Foul"
        
        # Use binary outcome template
        return StrategyCalculators._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
        
    @staticmethod
    def calculate_time_of_first_goal(
        back_odds_dict: Dict[str, Union[int, float, Decimal]],
        lay_odds_dict: Dict[str, Union[int, float, Decimal]],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Time of First Goal markets.
        
        Args:
            back_odds_dict: Dictionary mapping time periods to back odds
            lay_odds_dict: Dictionary mapping time periods to lay odds
            stake: The back stake amount
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_time_of_first_goal(
            ...     back_odds_dict={
            ...         '0-10 mins': 3.0, '11-20 mins': 4.0, 
            ...         '21-30 mins': 5.0, '31-40 mins': 7.0,
            ...         '41-Half Time': 9.0, '46-55 mins': 10.0,
            ...         '56-65 mins': 15.0, '66-75 mins': 20.0,
            ...         '76-Full Time': 25.0, 'No Goal': 12.0
            ...     },
            ...     lay_odds_dict={
            ...         '0-10 mins': 3.2, '11-20 mins': 4.2, 
            ...         '21-30 mins': 5.2, '31-40 mins': 7.3,
            ...         '41-Half Time': 9.3, '46-55 mins': 10.5,
            ...         '56-65 mins': 16.0, '66-75 mins': 21.0,
            ...         '76-Full Time': 27.0, 'No Goal': 13.0
            ...     },
            ...     stake=100, commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string
        bet_type = "Time of First Goal"
        
        # Use multi-outcome template
        return StrategyCalculators._calculate_multi_outcome_bet(
            bet_type=bet_type,
            back_odds_dict=back_odds_dict,
            lay_odds_dict=lay_odds_dict,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    
    @staticmethod
    def calculate_half_with_most_goals(
        back_odds_dict: Dict[str, Union[int, float, Decimal]],
        lay_odds_dict: Dict[str, Union[int, float, Decimal]],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Half with Most Goals markets.
        
        Args:
            back_odds_dict: Dictionary mapping outcomes to back odds ('First Half', 'Second Half', 'Equal')
            lay_odds_dict: Dictionary mapping outcomes to lay odds
            stake: The back stake amount
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_half_with_most_goals(
            ...     back_odds_dict={'First Half': 3.0, 'Second Half': 2.0, 'Equal': 3.5},
            ...     lay_odds_dict={'First Half': 3.2, 'Second Half': 2.1, 'Equal': 3.7},
            ...     stake=100, commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string
        bet_type = "Half with Most Goals"
        
        # Use multi-outcome template
        return StrategyCalculators._calculate_multi_outcome_bet(
            bet_type=bet_type,
            back_odds_dict=back_odds_dict,
            lay_odds_dict=lay_odds_dict,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    
    @staticmethod
    def calculate_first_goal_time_bands(
        back_odds_dict: Dict[str, Union[int, float, Decimal]],
        lay_odds_dict: Dict[str, Union[int, float, Decimal]],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for First Goal Time Bands markets.
        
        Args:
            back_odds_dict: Dictionary mapping time band outcomes to back odds
            lay_odds_dict: Dictionary mapping time band outcomes to lay odds
            stake: The back stake amount
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_first_goal_time_bands(
            ...     back_odds_dict={
            ...         'Before 15:00': 2.0, '15:01-30:00': 3.5, 
            ...         '30:01-45:00': 5.0, '45:01-60:00': 7.0,
            ...         '60:01-75:00': 10.0, '75:01-Full Time': 15.0,
            ...         'No Goal': 12.0
            ...     },
            ...     lay_odds_dict={
            ...         'Before 15:00': 2.1, '15:01-30:00': 3.7, 
            ...         '30:01-45:00': 5.3, '45:01-60:00': 7.5,
            ...         '60:01-75:00': 10.5, '75:01-Full Time': 16.0,
            ...         'No Goal': 13.0
            ...     },
            ...     stake=100, commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string
        bet_type = "First Goal Time Bands"
        
        # Use multi-outcome template
        return StrategyCalculators._calculate_multi_outcome_bet(
            bet_type=bet_type,
            back_odds_dict=back_odds_dict,
            lay_odds_dict=lay_odds_dict,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    
    @staticmethod
    def calculate_10_minute_result(
        back_odds_dict: Dict[str, Union[int, float, Decimal]],
        lay_odds_dict: Dict[str, Union[int, float, Decimal]],
        stake: Union[int, float, Decimal],
        minute: int = 10,
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for 10 Minute Result markets.
        
        Args:
            back_odds_dict: Dictionary mapping outcomes to back odds ('Home', 'Draw', 'Away')
            lay_odds_dict: Dictionary mapping outcomes to lay odds
            stake: The back stake amount
            minute: The minute to check the result (default 10)
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_10_minute_result(
            ...     back_odds_dict={'Home': 5.0, 'Draw': 1.3, 'Away': 10.0},
            ...     lay_odds_dict={'Home': 5.5, 'Draw': 1.35, 'Away': 11.0},
            ...     stake=100, minute=10, commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string with minute
        bet_type = f"{minute} Minute Result"
        
        # Use multi-outcome template
        result = StrategyCalculators._calculate_multi_outcome_bet(

            bet_type=bet_type,

            back_odds_dict=back_odds_dict,

            lay_odds_dict=lay_odds_dict,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
        
        return result
    
    @staticmethod
    def calculate_goal_in_first_10_minutes(
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        minutes: int = 10,
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Goal in First X Minutes markets.
        
        Args:
            back_odds_yes: The back odds for a goal to be scored in the first X minutes
            lay_odds_yes: The lay odds for a goal to be scored in the first X minutes
            back_odds_no: The back odds for no goal to be scored in the first X minutes
            lay_odds_no: The lay odds for no goal to be scored in the first X minutes
            stake: The back stake amount
            minutes: Number of minutes (default 10)
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_goal_in_first_10_minutes(
            ...     back_odds_yes=3.0, lay_odds_yes=3.2,
            ...     back_odds_no=1.4, lay_odds_no=1.45,
            ...     stake=100, minutes=10,
            ...     commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string with minutes
        bet_type = f"Goal in First {minutes} Minutes"
        
        # Use binary outcome template
        result = StrategyCalculators._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
        
        return result
    
    @staticmethod
    def calculate_time_of_next_goal(
        back_odds_dict: Dict[str, Union[int, float, Decimal]],
        lay_odds_dict: Dict[str, Union[int, float, Decimal]],
        stake: Union[int, float, Decimal],
        goal_number: int = 1,
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Time of Next Goal markets.
        
        Args:
            back_odds_dict: Dictionary mapping time periods to back odds
            lay_odds_dict: Dictionary mapping time periods to lay odds
            stake: The back stake amount
            goal_number: The goal number (default 1 for first goal)
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_time_of_next_goal(
            ...     back_odds_dict={
            ...         '0-15 mins': 3.0, '16-30 mins': 4.0, 
            ...         '31-45 mins': 5.0, '46-60 mins': 6.0,
            ...         '61-75 mins': 8.0, '76-90 mins': 10.0,
            ...         'No Goal': 9.0
            ...     },
            ...     lay_odds_dict={
            ...         '0-15 mins': 3.2, '16-30 mins': 4.2, 
            ...         '31-45 mins': 5.3, '46-60 mins': 6.4,
            ...         '61-75 mins': 8.5, '76-90 mins': 10.5,
            ...         'No Goal': 9.5
            ...     },
            ...     stake=100, goal_number=2, commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string with goal number
        goal_description = "First Goal" if goal_number == 1 else f"{goal_number}{'nd' if goal_number == 2 else 'rd' if goal_number == 3 else 'th'} Goal"
        bet_type = f"Time of {goal_description}"
        
        # Use multi-outcome template
        result = StrategyCalculators._calculate_multi_outcome_bet(

            bet_type=bet_type,

            back_odds_dict=back_odds_dict,

            lay_odds_dict=lay_odds_dict,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
        
        return result
    
    @staticmethod
    def calculate_winning_margin(
        back_odds_dict: Dict[str, Union[int, float, Decimal]],
        lay_odds_dict: Dict[str, Union[int, float, Decimal]],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Winning Margin markets.
        
        Args:
            back_odds_dict: Dictionary mapping margin outcomes to back odds
            lay_odds_dict: Dictionary mapping margin outcomes to lay odds
            stake: The back stake amount
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_winning_margin(
            ...     back_odds_dict={
            ...         'Home by 1': 4.0, 'Home by 2': 6.0, 
            ...         'Home by 3+': 10.0, 'Draw': 3.5,
            ...         'Away by 1': 4.5, 'Away by 2': 8.0,
            ...         'Away by 3+': 15.0
            ...     },
            ...     lay_odds_dict={
            ...         'Home by 1': 4.2, 'Home by 2': 6.3, 
            ...         'Home by 3+': 10.5, 'Draw': 3.7,
            ...         'Away by 1': 4.8, 'Away by 2': 8.5,
            ...         'Away by 3+': 16.0
            ...     },
            ...     stake=100, commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string
        bet_type = "Winning Margin"
        
        # Use multi-outcome template
        return StrategyCalculators._calculate_multi_outcome_bet(
            bet_type=bet_type,
            back_odds_dict=back_odds_dict,
            lay_odds_dict=lay_odds_dict,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    
    @staticmethod
    def calculate_method_of_victory(
        back_odds_dict: Dict[str, Union[int, float, Decimal]],
        lay_odds_dict: Dict[str, Union[int, float, Decimal]],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Method of Victory markets.
        
        Args:
            back_odds_dict: Dictionary mapping victory methods to back odds
            lay_odds_dict: Dictionary mapping victory methods to lay odds
            stake: The back stake amount
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_method_of_victory(
            ...     back_odds_dict={
            ...         'Home in 90 mins': 2.5, 'Home after Extra Time': 15.0, 
            ...         'Home on Penalties': 12.0, 'Draw after 90 mins': 3.2,
            ...         'Away in 90 mins': 3.0, 'Away after Extra Time': 17.0,
            ...         'Away on Penalties': 14.0
            ...     },
            ...     lay_odds_dict={
            ...         'Home in 90 mins': 2.6, 'Home after Extra Time': 16.0, 
            ...         'Home on Penalties': 13.0, 'Draw after 90 mins': 3.4,
            ...         'Away in 90 mins': 3.1, 'Away after Extra Time': 18.0,
            ...         'Away on Penalties': 15.0
            ...     },
            ...     stake=100, commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string
        bet_type = "Method of Victory"
        
        # Use multi-outcome template
        return StrategyCalculators._calculate_multi_outcome_bet(
            bet_type=bet_type,
            back_odds_dict=back_odds_dict,
            lay_odds_dict=lay_odds_dict,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    
    @staticmethod
    def calculate_team_to_score_first(
        back_odds_dict: Dict[str, Union[int, float, Decimal]],
        lay_odds_dict: Dict[str, Union[int, float, Decimal]],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Team to Score First markets.
        
        Args:
            back_odds_dict: Dictionary mapping teams to back odds (e.g., 'Home', 'Away', 'No Goal')
            lay_odds_dict: Dictionary mapping teams to lay odds
            stake: The back stake amount
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_team_to_score_first(
            ...     back_odds_dict={'Home': 1.8, 'Away': 2.2, 'No Goal': 10.0},
            ...     lay_odds_dict={'Home': 1.85, 'Away': 2.3, 'No Goal': 11.0},
            ...     stake=100, commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string
        bet_type = "Team to Score First"
        
        # Use multi-outcome template
        return StrategyCalculators._calculate_multi_outcome_bet(
            bet_type=bet_type,
            back_odds_dict=back_odds_dict,
            lay_odds_dict=lay_odds_dict,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    
    @staticmethod
    def calculate_team_to_score_last(
        back_odds_dict: Dict[str, Union[int, float, Decimal]],
        lay_odds_dict: Dict[str, Union[int, float, Decimal]],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Team to Score Last markets.
        
        Args:
            back_odds_dict: Dictionary mapping teams to back odds (e.g., 'Home', 'Away', 'No Goal')
            lay_odds_dict: Dictionary mapping teams to lay odds
            stake: The back stake amount
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_team_to_score_last(
            ...     back_odds_dict={'Home': 1.9, 'Away': 2.1, 'No Goal': 10.0},
            ...     lay_odds_dict={'Home': 1.95, 'Away': 2.2, 'No Goal': 11.0},
            ...     stake=100, commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string
        bet_type = "Team to Score Last"
        
        # Use multi-outcome template
        return StrategyCalculators._calculate_multi_outcome_bet(
            bet_type=bet_type,
            back_odds_dict=back_odds_dict,
            lay_odds_dict=lay_odds_dict,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    
    @staticmethod
    def calculate_match_goals_odd_even(
        back_odds_even: Union[int, float, Decimal],
        lay_odds_even: Union[int, float, Decimal],
        back_odds_odd: Union[int, float, Decimal],
        lay_odds_odd: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Match Goals Odd/Even markets.
        
        Args:
            back_odds_even: The back odds for an even number of goals
            lay_odds_even: The lay odds for an even number of goals
            back_odds_odd: The back odds for an odd number of goals
            lay_odds_odd: The lay odds for an odd number of goals
            stake: The back stake amount
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_match_goals_odd_even(
            ...     back_odds_even=1.9, lay_odds_even=2.0,
            ...     back_odds_odd=1.9, lay_odds_odd=2.0,
            ...     stake=100, commission=0.02, back_commission=0.0
            ... )
        """
        # Map odds to a dictionary for the multi-outcome template
        back_odds_dict = {'Even': back_odds_even, 'Odd': back_odds_odd}
        lay_odds_dict = {'Even': lay_odds_even, 'Odd': lay_odds_odd}
        
        # Create bet type string
        bet_type = "Match Goals Odd/Even"
        
        # Use multi-outcome template
        return StrategyCalculators._calculate_multi_outcome_bet(
            bet_type=bet_type,
            back_odds_dict=back_odds_dict,
            lay_odds_dict=lay_odds_dict,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    
    @staticmethod
    def calculate_team_to_win_to_nil(
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        team: str = "Home",
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Team to Win to Nil markets.
        
        Args:
            back_odds_yes: The back odds for the team to win to nil
            lay_odds_yes: The lay odds for the team to win to nil
            back_odds_no: The back odds for the team not to win to nil
            lay_odds_no: The lay odds for the team not to win to nil
            stake: The back stake amount
            team: The team name (default "Home")
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_team_to_win_to_nil(
            ...     back_odds_yes=3.5, lay_odds_yes=3.7,
            ...     back_odds_no=1.3, lay_odds_no=1.35,
            ...     stake=100, team="Manchester City",
            ...     commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string with team name
        bet_type = f"{team} to Win to Nil"
        
        # Use binary outcome template
        return StrategyCalculators._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    
    @staticmethod
    def calculate_both_teams_to_score_in_both_halves(
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Both Teams to Score in Both Halves markets.
        
        Args:
            back_odds_yes: The back odds for both teams to score in both halves
            lay_odds_yes: The lay odds for both teams to score in both halves
            back_odds_no: The back odds for both teams not to score in both halves
            lay_odds_no: The lay odds for both teams not to score in both halves
            stake: The back stake amount
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_both_teams_to_score_in_both_halves(
            ...     back_odds_yes=15.0, lay_odds_yes=16.0,
            ...     back_odds_no=1.05, lay_odds_no=1.1,
            ...     stake=100, commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string
        bet_type = "Both Teams to Score in Both Halves"
        
        # Use binary outcome template
        return StrategyCalculators._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    
    @staticmethod
    def calculate_exact_score(
        back_odds_dict: Dict[str, Union[int, float, Decimal]],
        lay_odds_dict: Dict[str, Union[int, float, Decimal]],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Exact Score markets.
        
        Args:
            back_odds_dict: Dictionary mapping score outcomes to back odds (e.g., '1-0', '2-1')
            lay_odds_dict: Dictionary mapping score outcomes to lay odds
            stake: The back stake amount
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_exact_score(
            ...     back_odds_dict={'1-0': 7.0, '2-0': 8.0, '2-1': 8.5, '3-0': 12.0, 
            ...                    '3-1': 12.0, '3-2': 20.0, '0-0': 12.0, '1-1': 6.0, 
            ...                    '2-2': 14.0, '0-1': 8.0, '0-2': 10.0, '1-2': 10.0, 
            ...                    '0-3': 20.0, '1-3': 20.0, '2-3': 30.0, 'Any Other': 16.0},
            ...     lay_odds_dict={'1-0': 7.2, '2-0': 8.2, '2-1': 8.7, '3-0': 12.5, 
            ...                   '3-1': 12.5, '3-2': 21.0, '0-0': 12.5, '1-1': 6.2, 
            ...                   '2-2': 14.5, '0-1': 8.2, '0-2': 10.5, '1-2': 10.5, 
            ...                   '0-3': 21.0, '1-3': 21.0, '2-3': 32.0, 'Any Other': 17.0},
            ...     stake=100, commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string
        bet_type = "Exact Score"
        
        # Use multi-outcome template
        return StrategyCalculators._calculate_multi_outcome_bet(
            bet_type=bet_type,
            back_odds_dict=back_odds_dict,
            lay_odds_dict=lay_odds_dict,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    
    @staticmethod
    def calculate_half_time_score(
        back_odds_dict: Dict[str, Union[int, float, Decimal]],
        lay_odds_dict: Dict[str, Union[int, float, Decimal]],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Half Time Score markets.
        
        Args:
            back_odds_dict: Dictionary mapping half-time score outcomes to back odds
            lay_odds_dict: Dictionary mapping half-time score outcomes to lay odds
            stake: The back stake amount
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_half_time_score(
            ...     back_odds_dict={'0-0': 2.5, '1-0': 4.5, '0-1': 5.0, '1-1': 6.0, 
            ...                    '2-0': 9.0, '0-2': 12.0, '2-1': 15.0, '1-2': 17.0, 
            ...                    'Any Other': 20.0},
            ...     lay_odds_dict={'0-0': 2.6, '1-0': 4.7, '0-1': 5.2, '1-1': 6.2, 
            ...                   '2-0': 9.5, '0-2': 12.5, '2-1': 16.0, '1-2': 18.0, 
            ...                   'Any Other': 21.0},
            ...     stake=100, commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string
        bet_type = "Half Time Score"
        
        # Use multi-outcome template
        return StrategyCalculators._calculate_multi_outcome_bet(
            bet_type=bet_type,
            back_odds_dict=back_odds_dict,
            lay_odds_dict=lay_odds_dict,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    
    @staticmethod
    def calculate_correct_score_group(
        back_odds_dict: Dict[str, Union[int, float, Decimal]],
        lay_odds_dict: Dict[str, Union[int, float, Decimal]],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Correct Score Group markets.
        
        Args:
            back_odds_dict: Dictionary mapping score group outcomes to back odds
            lay_odds_dict: Dictionary mapping score group outcomes to lay odds
            stake: The back stake amount
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_correct_score_group(
            ...     back_odds_dict={'Home 1-0, 2-0 or 3-0': 4.0, 
            ...                    'Home 2-1, 3-1 or 4-1': 5.0,
            ...                    'Home 3-2, 4-2 or 4-3': 15.0,
            ...                    'Home 0-0': 12.0,
            ...                    'Draw 1-1, 2-2 or 3-3': 4.5,
            ...                    'Away 0-1, 0-2 or 0-3': 6.0,
            ...                    'Away 1-2, 1-3 or 1-4': 7.0,
            ...                    'Away 2-3, 2-4 or 3-4': 20.0,
            ...                    'Any Other Score': 10.0},
            ...     lay_odds_dict={'Home 1-0, 2-0 or 3-0': 4.2, 
            ...                   'Home 2-1, 3-1 or 4-1': 5.2,
            ...                   'Home 3-2, 4-2 or 4-3': 16.0,
            ...                   'Home 0-0': 13.0,
            ...                   'Draw 1-1, 2-2 or 3-3': 4.7,
            ...                   'Away 0-1, 0-2 or 0-3': 6.3,
            ...                   'Away 1-2, 1-3 or 1-4': 7.4,
            ...                   'Away 2-3, 2-4 or 3-4': 21.0,
            ...                   'Any Other Score': 10.5},
            ...     stake=100, commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string
        bet_type = "Correct Score Group"
        
        # Use multi-outcome template
        return StrategyCalculators._calculate_multi_outcome_bet(
            bet_type=bet_type,
            back_odds_dict=back_odds_dict,
            lay_odds_dict=lay_odds_dict,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    
    @staticmethod
    def calculate_score_cast(
        back_odds_dict: Dict[str, Union[int, float, Decimal]],
        lay_odds_dict: Dict[str, Union[int, float, Decimal]],
        stake: Union[int, float, Decimal],
        player_name: str = "Player",
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Scorecast markets (player to score first and correct score).
        
        Args:
            back_odds_dict: Dictionary mapping scorecast outcomes to back odds
            lay_odds_dict: Dictionary mapping scorecast outcomes to lay odds
            stake: The back stake amount
            player_name: The name of the player (default "Player")
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_score_cast(
            ...     back_odds_dict={'Player to score first and 1-0': 20.0, 
            ...                    'Player to score first and 2-0': 25.0,
            ...                    'Player to score first and 2-1': 30.0,
            ...                    'Player to score first and 3-0': 50.0,
            ...                    'Player to score first and 3-1': 60.0},
            ...     lay_odds_dict={'Player to score first and 1-0': 22.0, 
            ...                   'Player to score first and 2-0': 27.0,
            ...                   'Player to score first and 2-1': 32.0,
            ...                   'Player to score first and 3-0': 55.0,
            ...                   'Player to score first and 3-1': 65.0},
            ...     stake=100, player_name="Harry Kane",
            ...     commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string with player name
        bet_type = f"{player_name} Scorecast"
        
        # Use multi-outcome template
        return StrategyCalculators._calculate_multi_outcome_bet(
            bet_type=bet_type,
            back_odds_dict=back_odds_dict,
            lay_odds_dict=lay_odds_dict,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    
    @staticmethod
    def calculate_wincast(
        back_odds_dict: Dict[str, Union[int, float, Decimal]],
        lay_odds_dict: Dict[str, Union[int, float, Decimal]],
        stake: Union[int, float, Decimal],
        player_name: str = "Player",
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Wincast markets (player to score first and team to win).
        
        Args:
            back_odds_dict: Dictionary mapping wincast outcomes to back odds
            lay_odds_dict: Dictionary mapping wincast outcomes to lay odds
            stake: The back stake amount
            player_name: The name of the player (default "Player")
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_wincast(
            ...     back_odds_dict={'Player to score first and Home win': 6.0, 
            ...                    'Player to score first and Away win': 20.0,
            ...                    'Player to score first and Draw': 10.0},
            ...     lay_odds_dict={'Player to score first and Home win': 6.5, 
            ...                   'Player to score first and Away win': 22.0,
            ...                   'Player to score first and Draw': 10.5},
            ...     stake=100, player_name="Salah",
            ...     commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string with player name
        bet_type = f"{player_name} Wincast"
        
        # Use multi-outcome template
        return StrategyCalculators._calculate_multi_outcome_bet(
            bet_type=bet_type,
            back_odds_dict=back_odds_dict,
            lay_odds_dict=lay_odds_dict,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    
    @staticmethod
    def calculate_timecast(
        back_odds_dict: Dict[str, Union[int, float, Decimal]],
        lay_odds_dict: Dict[str, Union[int, float, Decimal]],
        stake: Union[int, float, Decimal],
        player_name: str = "Player",
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Timecast markets (player to score first and time of goal).
        
        Args:
            back_odds_dict: Dictionary mapping timecast outcomes to back odds
            lay_odds_dict: Dictionary mapping timecast outcomes to lay odds
            stake: The back stake amount
            player_name: The name of the player (default "Player")
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_timecast(
            ...     back_odds_dict={'Player to score first and 1-10 mins': 10.0, 
            ...                    'Player to score first and 11-20 mins': 12.0,
            ...                    'Player to score first and 21-30 mins': 14.0,
            ...                    'Player to score first and 31-40 mins': 16.0,
            ...                    'Player to score first and 41-Half Time': 18.0,
            ...                    'Player to score first and 46-60 mins': 14.0,
            ...                    'Player to score first and 61-70 mins': 16.0,
            ...                    'Player to score first and 71-80 mins': 18.0,
            ...                    'Player to score first and 81-Full Time': 20.0},
            ...     lay_odds_dict={'Player to score first and 1-10 mins': 11.0, 
            ...                   'Player to score first and 11-20 mins': 13.0,
            ...                   'Player to score first and 21-30 mins': 15.0,
            ...                   'Player to score first and 31-40 mins': 17.0,
            ...                   'Player to score first and 41-Half Time': 19.0,
            ...                   'Player to score first and 46-60 mins': 15.0,
            ...                   'Player to score first and 61-70 mins': 17.0,
            ...                   'Player to score first and 71-80 mins': 19.0,
            ...                   'Player to score first and 81-Full Time': 22.0},
            ...     stake=100, player_name="Mbappe",
            ...     commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string with player name
        bet_type = f"{player_name} Timecast"
        
        # Use multi-outcome template
        return StrategyCalculators._calculate_multi_outcome_bet(
            bet_type=bet_type,
            back_odds_dict=back_odds_dict,
            lay_odds_dict=lay_odds_dict,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
        
    # === Special Market Calculators ===
    
    @staticmethod
    def calculate_special_var_change_market(
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        special_event: str = "VAR to Change a Decision",
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for VAR to Change a Decision markets.
        
        Args:
            back_odds_yes: The back odds for "Yes" outcome
            lay_odds_yes: The lay odds for "Yes" outcome
            back_odds_no: The back odds for "No" outcome
            lay_odds_no: The lay odds for "No" outcome
            stake: The stake amount
            special_event: The description of the event (default "VAR to Change a Decision")
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_special_var_change_market(
            ...     back_odds_yes=2.5, lay_odds_yes=2.6,
            ...     back_odds_no=1.55, lay_odds_no=1.6,
            ...     stake=100, special_event="VAR to Change a Decision",
            ...     commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string
        bet_type = special_event
        
        # Use binary outcome template
        return StrategyCalculators._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
        
    @staticmethod
    def calculate_special_penalty_awarded_market(
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        special_event: str = "Penalty Awarded",
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Penalty Awarded markets.
        
        Args:
            back_odds_yes: The back odds for "Yes" outcome
            lay_odds_yes: The lay odds for "Yes" outcome
            back_odds_no: The back odds for "No" outcome
            lay_odds_no: The lay odds for "No" outcome
            stake: The stake amount
            special_event: The description of the event (default "Penalty Awarded")
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_special_penalty_awarded_market(
            ...     back_odds_yes=2.2, lay_odds_yes=2.3,
            ...     back_odds_no=1.75, lay_odds_no=1.8,
            ...     stake=100, special_event="Penalty Awarded",
            ...     commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string
        bet_type = special_event
        
        # Use binary outcome template
        return StrategyCalculators._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
        
    @staticmethod
    def calculate_special_penalty_missed_market(
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        special_event: str = "Penalty Missed",
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Penalty Missed markets.
        
        Args:
            back_odds_yes: The back odds for "Yes" outcome
            lay_odds_yes: The lay odds for "Yes" outcome
            back_odds_no: The back odds for "No" outcome
            lay_odds_no: The lay odds for "No" outcome
            stake: The stake amount
            special_event: The description of the event (default "Penalty Missed")
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_special_penalty_missed_market(
            ...     back_odds_yes=6.0, lay_odds_yes=6.5,
            ...     back_odds_no=1.2, lay_odds_no=1.25,
            ...     stake=100, special_event="Penalty Missed",
            ...     commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string
        bet_type = special_event
        
        # Use binary outcome template
        return StrategyCalculators._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
        
    @staticmethod
    def calculate_special_own_goal_market(
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        special_event: str = "Own Goal Scored",
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Own Goal markets.
        
        Args:
            back_odds_yes: The back odds for "Yes" outcome
            lay_odds_yes: The lay odds for "Yes" outcome
            back_odds_no: The back odds for "No" outcome
            lay_odds_no: The lay odds for "No" outcome
            stake: The stake amount
            special_event: The description of the event (default "Own Goal Scored")
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_special_own_goal_market(
            ...     back_odds_yes=4.5, lay_odds_yes=4.8,
            ...     back_odds_no=1.25, lay_odds_no=1.3,
            ...     stake=100, special_event="Own Goal Scored",
            ...     commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string
        bet_type = special_event
        
        # Use binary outcome template
        return StrategyCalculators._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
        
    @staticmethod
    def calculate_special_goal_line_technology_market(
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        special_event: str = "Goal-Line Technology Used",
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Goal-Line Technology Used markets.
        
        Args:
            back_odds_yes: The back odds for "Yes" outcome
            lay_odds_yes: The lay odds for "Yes" outcome
            back_odds_no: The back odds for "No" outcome
            lay_odds_no: The lay odds for "No" outcome
            stake: The stake amount
            special_event: The description of the event (default "Goal-Line Technology Used")
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_special_goal_line_technology_market(
            ...     back_odds_yes=7.0, lay_odds_yes=7.5,
            ...     back_odds_no=1.15, lay_odds_no=1.2,
            ...     stake=100, special_event="Goal-Line Technology Used",
            ...     commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string
        bet_type = special_event
        
        # Use binary outcome template
        return StrategyCalculators._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    
    # === Card Betting Calculators ===
    
    @staticmethod
    def calculate_total_cards_over_under(
        back_odds_over: Union[int, float, Decimal],
        lay_odds_over: Union[int, float, Decimal],
        back_odds_under: Union[int, float, Decimal],
        lay_odds_under: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        card_line: Union[int, float, Decimal] = 3.5,
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Total Cards Over/Under markets.
        
        Args:
            back_odds_over: The back odds for over the card line
            lay_odds_over: The lay odds for over the card line
            back_odds_under: The back odds for under the card line
            lay_odds_under: The lay odds for under the card line
            stake: The back stake amount
            card_line: The card line (default 3.5)
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_total_cards_over_under(
            ...     back_odds_over=1.9, lay_odds_over=2.0,
            ...     back_odds_under=1.9, lay_odds_under=2.0,
            ...     stake=100, card_line=3.5,
            ...     commission=0.02, back_commission=0.0
            ... )
        """
        # Map odds to a dictionary for the multi-outcome template
        back_odds_dict = {f'Over {card_line}': back_odds_over, f'Under {card_line}': back_odds_under}
        lay_odds_dict = {f'Over {card_line}': lay_odds_over, f'Under {card_line}': lay_odds_under}
        
        # Create bet type string with card line
        bet_type = f"Total Cards Over/Under {card_line}"
        
        # Use multi-outcome template
        result = StrategyCalculators._calculate_multi_outcome_bet(

            bet_type=bet_type,

            back_odds_dict=back_odds_dict,

            lay_odds_dict=lay_odds_dict,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
        
        return result
    
    @staticmethod
    def calculate_team_cards_over_under(
        back_odds_over: Union[int, float, Decimal],
        lay_odds_over: Union[int, float, Decimal],
        back_odds_under: Union[int, float, Decimal],
        lay_odds_under: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        team: str = "Home",
        card_line: Union[int, float, Decimal] = 1.5,
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Team Cards Over/Under markets.
        
        Args:
            back_odds_over: The back odds for over the card line
            lay_odds_over: The lay odds for over the card line
            back_odds_under: The back odds for under the card line
            lay_odds_under: The lay odds for under the card line
            stake: The back stake amount
            team: The team name (default "Home")
            card_line: The card line (default 1.5)
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_team_cards_over_under(
            ...     back_odds_over=1.9, lay_odds_over=2.0,
            ...     back_odds_under=1.9, lay_odds_under=2.0,
            ...     stake=100, team="Chelsea", card_line=1.5,
            ...     commission=0.02, back_commission=0.0
            ... )
        """
        # Map odds to a dictionary for the multi-outcome template
        back_odds_dict = {f'Over {card_line}': back_odds_over, f'Under {card_line}': back_odds_under}
        lay_odds_dict = {f'Over {card_line}': lay_odds_over, f'Under {card_line}': lay_odds_under}
        
        # Create bet type string with team name and card line
        bet_type = f"{team} Cards Over/Under {card_line}"
        
        # Use multi-outcome template
        result = StrategyCalculators._calculate_multi_outcome_bet(

            bet_type=bet_type,

            back_odds_dict=back_odds_dict,

            lay_odds_dict=lay_odds_dict,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
        
        return result
    
    @staticmethod
    def calculate_first_card_alternate(
        back_odds_dict: Dict[str, Union[int, float, Decimal]],
        lay_odds_dict: Dict[str, Union[int, float, Decimal]],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for First Card markets.
        
        Args:
            back_odds_dict: Dictionary mapping teams to back odds (e.g., 'Home', 'Away', 'No Card')
            lay_odds_dict: Dictionary mapping teams to lay odds
            stake: The back stake amount
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_first_card_alternate(
            ...     back_odds_dict={'Home': 1.9, 'Away': 2.0, 'No Card': 15.0},
            ...     lay_odds_dict={'Home': 2.0, 'Away': 2.1, 'No Card': 16.0},
            ...     stake=100, commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string
        bet_type = "First Card"
        
        # Use multi-outcome template
        return StrategyCalculators._calculate_multi_outcome_bet(
            bet_type=bet_type,
            back_odds_dict=back_odds_dict,
            lay_odds_dict=lay_odds_dict,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    
    @staticmethod
    def calculate_last_card_alternate(
        back_odds_dict: Dict[str, Union[int, float, Decimal]],
        lay_odds_dict: Dict[str, Union[int, float, Decimal]],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Last Card markets.
        
        Args:
            back_odds_dict: Dictionary mapping teams to back odds (e.g., 'Home', 'Away', 'No Card')
            lay_odds_dict: Dictionary mapping teams to lay odds
            stake: The back stake amount
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_last_card_alternate(
            ...     back_odds_dict={'Home': 1.9, 'Away': 2.0, 'No Card': 15.0},
            ...     lay_odds_dict={'Home': 2.0, 'Away': 2.1, 'No Card': 16.0},
            ...     stake=100, commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string
        bet_type = "Last Card"
        
        # Use multi-outcome template
        return StrategyCalculators._calculate_multi_outcome_bet(
            bet_type=bet_type,
            back_odds_dict=back_odds_dict,
            lay_odds_dict=lay_odds_dict,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    
    @staticmethod
    def calculate_total_bookings_points(
        back_odds_dict: Dict[str, Union[int, float, Decimal]],
        lay_odds_dict: Dict[str, Union[int, float, Decimal]],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Total Booking Points markets.
        
        Args:
            back_odds_dict: Dictionary mapping points ranges to back odds
            lay_odds_dict: Dictionary mapping points ranges to lay odds
            stake: The back stake amount
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_total_bookings_points(
            ...     back_odds_dict={
            ...         '0-20': 8.0, '21-30': 5.0, '31-40': 4.0,
            ...         '41-50': 4.5, '51-60': 5.5, '61-70': 6.5,
            ...         '71+': 7.0
            ...     },
            ...     lay_odds_dict={
            ...         '0-20': 8.5, '21-30': 5.3, '31-40': 4.2,
            ...         '41-50': 4.7, '51-60': 5.8, '61-70': 6.8,
            ...         '71+': 7.5
            ...     },
            ...     stake=100, commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string
        bet_type = "Total Booking Points"
        
        # Use multi-outcome template
        return StrategyCalculators._calculate_multi_outcome_bet(
            bet_type=bet_type,
            back_odds_dict=back_odds_dict,
            lay_odds_dict=lay_odds_dict,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    
    @staticmethod
    def calculate_time_of_first_card(
        back_odds_dict: Dict[str, Union[int, float, Decimal]],
        lay_odds_dict: Dict[str, Union[int, float, Decimal]],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Time of First Card markets.
        
        Args:
            back_odds_dict: Dictionary mapping time periods to back odds
            lay_odds_dict: Dictionary mapping time periods to lay odds
            stake: The back stake amount
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_time_of_first_card(
            ...     back_odds_dict={
            ...         '0-10 mins': 4.0, '11-20 mins': 4.0, 
            ...         '21-30 mins': 5.0, '31-40 mins': 7.0,
            ...         '41-Half Time': 9.0, '46-55 mins': 12.0,
            ...         '56-65 mins': 16.0, '66-75 mins': 20.0,
            ...         '76-Full Time': 25.0, 'No Card': 50.0
            ...     },
            ...     lay_odds_dict={
            ...         '0-10 mins': 4.2, '11-20 mins': 4.2, 
            ...         '21-30 mins': 5.3, '31-40 mins': 7.3,
            ...         '41-Half Time': 9.5, '46-55 mins': 12.5,
            ...         '56-65 mins': 17.0, '66-75 mins': 22.0,
            ...         '76-Full Time': 27.0, 'No Card': 55.0
            ...     },
            ...     stake=100, commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string
        bet_type = "Time of First Card"
        
        # Use multi-outcome template
        return StrategyCalculators._calculate_multi_outcome_bet(
            bet_type=bet_type,
            back_odds_dict=back_odds_dict,
            lay_odds_dict=lay_odds_dict,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    
    @staticmethod
    def calculate_team_with_most_cards(
        back_odds_dict: Dict[str, Union[int, float, Decimal]],
        lay_odds_dict: Dict[str, Union[int, float, Decimal]],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Team with Most Cards markets.
        
        Args:
            back_odds_dict: Dictionary mapping teams to back odds (e.g., 'Home', 'Away', 'Equal')
            lay_odds_dict: Dictionary mapping teams to lay odds
            stake: The back stake amount
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_team_with_most_cards(
            ...     back_odds_dict={'Home': 2.5, 'Away': 2.2, 'Equal': 3.5},
            ...     lay_odds_dict={'Home': 2.6, 'Away': 2.3, 'Equal': 3.7},
            ...     stake=100, commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string
        bet_type = "Team with Most Cards"
        
        # Use multi-outcome template
        return StrategyCalculators._calculate_multi_outcome_bet(
            bet_type=bet_type,
            back_odds_dict=back_odds_dict,
            lay_odds_dict=lay_odds_dict,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
        
    @staticmethod
    def calculate_red_card_in_match(
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Red Card in Match markets.
        
        Args:
            back_odds_yes: The back odds for a red card to be shown
            lay_odds_yes: The lay odds for a red card to be shown
            back_odds_no: The back odds for no red card to be shown
            lay_odds_no: The lay odds for no red card to be shown
            stake: The back stake amount
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_red_card_in_match(
            ...     back_odds_yes=2.5, lay_odds_yes=2.6,
            ...     back_odds_no=1.5, lay_odds_no=1.55,
            ...     stake=100, commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string
        bet_type = "Red Card in Match"
        
        # Use binary outcome template
        return StrategyCalculators._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    
    # === Corner Betting Calculators ===
    
    @staticmethod
    def calculate_total_corners_over_under(
        back_odds_over: Union[int, float, Decimal],
        lay_odds_over: Union[int, float, Decimal],
        back_odds_under: Union[int, float, Decimal],
        lay_odds_under: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        corner_line: Union[int, float, Decimal] = 9.5,
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Total Corners Over/Under markets.
        
        Args:
            back_odds_over: The back odds for over the corner line
            lay_odds_over: The lay odds for over the corner line
            back_odds_under: The back odds for under the corner line
            lay_odds_under: The lay odds for under the corner line
            stake: The back stake amount
            corner_line: The corner line (default 9.5)
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_total_corners_over_under(
            ...     back_odds_over=1.9, lay_odds_over=2.0,
            ...     back_odds_under=1.9, lay_odds_under=2.0,
            ...     stake=100, corner_line=9.5,
            ...     commission=0.02, back_commission=0.0
            ... )
        """
        # Map odds to a dictionary for the multi-outcome template
        back_odds_dict = {f'Over {corner_line}': back_odds_over, f'Under {corner_line}': back_odds_under}
        lay_odds_dict = {f'Over {corner_line}': lay_odds_over, f'Under {corner_line}': lay_odds_under}
        
        # Create bet type string with corner line
        bet_type = f"Total Corners Over/Under {corner_line}"
        
        # Use multi-outcome template
        result = StrategyCalculators._calculate_multi_outcome_bet(

            bet_type=bet_type,

            back_odds_dict=back_odds_dict,

            lay_odds_dict=lay_odds_dict,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
        
        return result
    
    @staticmethod
    def calculate_team_corners_over_under(
        back_odds_over: Union[int, float, Decimal],
        lay_odds_over: Union[int, float, Decimal],
        back_odds_under: Union[int, float, Decimal],
        lay_odds_under: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        team: str = "Home",
        corner_line: Union[int, float, Decimal] = 4.5,
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Team Corners Over/Under markets.
        
        Args:
            back_odds_over: The back odds for over the corner line
            lay_odds_over: The lay odds for over the corner line
            back_odds_under: The back odds for under the corner line
            lay_odds_under: The lay odds for under the corner line
            stake: The back stake amount
            team: The team name (default "Home")
            corner_line: The corner line (default 4.5)
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_team_corners_over_under(
            ...     back_odds_over=1.9, lay_odds_over=2.0,
            ...     back_odds_under=1.9, lay_odds_under=2.0,
            ...     stake=100, team="Arsenal", corner_line=4.5,
            ...     commission=0.02, back_commission=0.0
            ... )
        """
        # Map odds to a dictionary for the multi-outcome template
        back_odds_dict = {f'Over {corner_line}': back_odds_over, f'Under {corner_line}': back_odds_under}
        lay_odds_dict = {f'Over {corner_line}': lay_odds_over, f'Under {corner_line}': lay_odds_under}
        
        # Create bet type string with team name and corner line
        bet_type = f"{team} Corners Over/Under {corner_line}"
        
        # Use multi-outcome template
        result = StrategyCalculators._calculate_multi_outcome_bet(

            bet_type=bet_type,

            back_odds_dict=back_odds_dict,

            lay_odds_dict=lay_odds_dict,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
        
        return result
    
    @staticmethod
    def calculate_first_corner(
        back_odds_dict: Dict[str, Union[int, float, Decimal]],
        lay_odds_dict: Dict[str, Union[int, float, Decimal]],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for First Corner markets.
        
        Args:
            back_odds_dict: Dictionary mapping teams to back odds (e.g., 'Home', 'Away')
            lay_odds_dict: Dictionary mapping teams to lay odds
            stake: The back stake amount
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_first_corner(
            ...     back_odds_dict={'Home': 1.9, 'Away': 2.0},
            ...     lay_odds_dict={'Home': 2.0, 'Away': 2.1},
            ...     stake=100, commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string
        bet_type = "First Corner"
        
        # Use multi-outcome template
        return StrategyCalculators._calculate_multi_outcome_bet(
            bet_type=bet_type,
            back_odds_dict=back_odds_dict,
            lay_odds_dict=lay_odds_dict,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    
    @staticmethod
    def calculate_last_corner(
        back_odds_dict: Dict[str, Union[int, float, Decimal]],
        lay_odds_dict: Dict[str, Union[int, float, Decimal]],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Last Corner markets.
        
        Args:
            back_odds_dict: Dictionary mapping teams to back odds (e.g., 'Home', 'Away')
            lay_odds_dict: Dictionary mapping teams to lay odds
            stake: The back stake amount
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_last_corner(
            ...     back_odds_dict={'Home': 1.9, 'Away': 2.0},
            ...     lay_odds_dict={'Home': 2.0, 'Away': 2.1},
            ...     stake=100, commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string
        bet_type = "Last Corner"
        
        # Use multi-outcome template
        return StrategyCalculators._calculate_multi_outcome_bet(
            bet_type=bet_type,
            back_odds_dict=back_odds_dict,
            lay_odds_dict=lay_odds_dict,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    
    @staticmethod
    def calculate_corner_match_handicap(
        back_odds_dict: Dict[str, Union[int, float, Decimal]],
        lay_odds_dict: Dict[str, Union[int, float, Decimal]],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Corner Match Handicap markets.
        
        Args:
            back_odds_dict: Dictionary mapping handicap results to back odds
            lay_odds_dict: Dictionary mapping handicap results to lay odds
            stake: The back stake amount
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_corner_match_handicap(
            ...     back_odds_dict={'Home -2': 2.5, 'Tie': 3.5, 'Away +2': 2.7},
            ...     lay_odds_dict={'Home -2': 2.6, 'Tie': 3.7, 'Away +2': 2.8},
            ...     stake=100, commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string
        bet_type = "Corner Match Handicap"
        
        # Use multi-outcome template
        return StrategyCalculators._calculate_multi_outcome_bet(
            bet_type=bet_type,
            back_odds_dict=back_odds_dict,
            lay_odds_dict=lay_odds_dict,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    
    @staticmethod
    def calculate_corner_match_race(
        back_odds_dict: Dict[str, Union[int, float, Decimal]],
        lay_odds_dict: Dict[str, Union[int, float, Decimal]],
        stake: Union[int, float, Decimal],
        target: int = 5,
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Corner Match Race markets.
        
        Args:
            back_odds_dict: Dictionary mapping teams to back odds (e.g., 'Home', 'Away', 'Neither')
            lay_odds_dict: Dictionary mapping teams to lay odds
            stake: The back stake amount
            target: The target number of corners (default 5)
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_corner_match_race(
            ...     back_odds_dict={'Home': 2.0, 'Away': 2.2, 'Neither': 4.0},
            ...     lay_odds_dict={'Home': 2.1, 'Away': 2.3, 'Neither': 4.2},
            ...     stake=100, target=5, commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string with target
        bet_type = f"Corner Match Race to {target}"
        
        # Use multi-outcome template
        result = StrategyCalculators._calculate_multi_outcome_bet(

            bet_type=bet_type,

            back_odds_dict=back_odds_dict,

            lay_odds_dict=lay_odds_dict,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
        
        return result
    
    # === Half Betting Calculators ===
    
    @staticmethod
    def calculate_highest_scoring_half(
        back_odds_dict: Dict[str, Union[int, float, Decimal]],
        lay_odds_dict: Dict[str, Union[int, float, Decimal]],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Highest Scoring Half markets.
        
        Args:
            back_odds_dict: Dictionary mapping halves to back odds (e.g., 'First Half', 'Second Half', 'Equal')
            lay_odds_dict: Dictionary mapping halves to lay odds
            stake: The back stake amount
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_highest_scoring_half(
            ...     back_odds_dict={'First Half': 3.0, 'Second Half': 2.0, 'Equal': 3.5},
            ...     lay_odds_dict={'First Half': 3.2, 'Second Half': 2.1, 'Equal': 3.7},
            ...     stake=100, commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string
        bet_type = "Highest Scoring Half"
        
        # Use multi-outcome template
        return StrategyCalculators._calculate_multi_outcome_bet(
            bet_type=bet_type,
            back_odds_dict=back_odds_dict,
            lay_odds_dict=lay_odds_dict,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    
    @staticmethod
    def calculate_first_half_result(
        back_odds_dict: Dict[str, Union[int, float, Decimal]],
        lay_odds_dict: Dict[str, Union[int, float, Decimal]],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for First Half Result markets.
        
        Args:
            back_odds_dict: Dictionary mapping outcomes to back odds (e.g., 'Home', 'Draw', 'Away')
            lay_odds_dict: Dictionary mapping outcomes to lay odds
            stake: The back stake amount
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_first_half_result(
            ...     back_odds_dict={'Home': 2.5, 'Draw': 2.0, 'Away': 3.5},
            ...     lay_odds_dict={'Home': 2.6, 'Draw': 2.1, 'Away': 3.7},
            ...     stake=100, commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string
        bet_type = "First Half Result"
        
        # Use multi-outcome template
        return StrategyCalculators._calculate_multi_outcome_bet(
            bet_type=bet_type,
            back_odds_dict=back_odds_dict,
            lay_odds_dict=lay_odds_dict,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    
    @staticmethod
    def calculate_second_half_result(
        back_odds_dict: Dict[str, Union[int, float, Decimal]],
        lay_odds_dict: Dict[str, Union[int, float, Decimal]],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Second Half Result markets.
        
        Args:
            back_odds_dict: Dictionary mapping outcomes to back odds (e.g., 'Home', 'Draw', 'Away')
            lay_odds_dict: Dictionary mapping outcomes to lay odds
            stake: The back stake amount
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_second_half_result(
            ...     back_odds_dict={'Home': 2.5, 'Draw': 2.0, 'Away': 3.5},
            ...     lay_odds_dict={'Home': 2.6, 'Draw': 2.1, 'Away': 3.7},
            ...     stake=100, commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string
        bet_type = "Second Half Result"
        
        # Use multi-outcome template
        return StrategyCalculators._calculate_multi_outcome_bet(
            bet_type=bet_type,
            back_odds_dict=back_odds_dict,
            lay_odds_dict=lay_odds_dict,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    
    # === Team-specific Calculators ===
    
    @staticmethod
    def calculate_team_to_score_alternate(
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        team: str = "Home",
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Alternate calculator for Team to Score markets with default team parameter.
        
        Args:
            back_odds_yes: The back odds for the team to score
            lay_odds_yes: The lay odds for the team to score
            back_odds_no: The back odds for the team not to score
            lay_odds_no: The lay odds for the team not to score
            stake: The back stake amount
            team: The team name (default "Home")
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_team_to_score(
            ...     back_odds_yes=1.2, lay_odds_yes=1.25,
            ...     back_odds_no=4.5, lay_odds_no=4.8,
            ...     stake=100, team="Liverpool",
            ...     commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string with team name
        bet_type = f"{team} to Score"
        
        # Use binary outcome template
        return StrategyCalculators._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    
    @staticmethod
    def calculate_team_clean_sheet(
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        team: str = "Home",
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Team Clean Sheet markets.
        
        Args:
            back_odds_yes: The back odds for the team to keep a clean sheet
            lay_odds_yes: The lay odds for the team to keep a clean sheet
            back_odds_no: The back odds for the team not to keep a clean sheet
            lay_odds_no: The lay odds for the team not to keep a clean sheet
            stake: The back stake amount
            team: The team name (default "Home")
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_team_clean_sheet(
            ...     back_odds_yes=2.5, lay_odds_yes=2.6,
            ...     back_odds_no=1.5, lay_odds_no=1.55,
            ...     stake=100, team="Manchester City",
            ...     commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string with team name
        bet_type = f"{team} Clean Sheet"
        
        # Use binary outcome template
        return StrategyCalculators._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    
    @staticmethod
    def calculate_team_shots_on_target(
        back_odds_dict: Dict[str, Union[int, float, Decimal]],
        lay_odds_dict: Dict[str, Union[int, float, Decimal]],
        stake: Union[int, float, Decimal],
        team: str = "Home",
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Team Shots on Target markets.
        
        Args:
            back_odds_dict: Dictionary mapping shot ranges to back odds
            lay_odds_dict: Dictionary mapping shot ranges to lay odds
            stake: The back stake amount
            team: The team name (default "Home")
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_team_shots_on_target(
            ...     back_odds_dict={'0-2': 4.0, '3-4': 3.0, '5-6': 3.5, '7+': 4.5},
            ...     lay_odds_dict={'0-2': 4.2, '3-4': 3.2, '5-6': 3.7, '7+': 4.8},
            ...     stake=100, team="Bayern Munich",
            ...     commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string with team name
        bet_type = f"{team} Shots on Target"
        
        # Use multi-outcome template
        return StrategyCalculators._calculate_multi_outcome_bet(
            bet_type=bet_type,
            back_odds_dict=back_odds_dict,
            lay_odds_dict=lay_odds_dict,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    
    @staticmethod
    def calculate_team_goals_exact(
        back_odds_dict: Dict[str, Union[int, float, Decimal]],
        lay_odds_dict: Dict[str, Union[int, float, Decimal]],
        stake: Union[int, float, Decimal],
        team: str = "Home",
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Team Goals Exact markets.
        
        Args:
            back_odds_dict: Dictionary mapping goal numbers to back odds (e.g., '0', '1', '2', etc.)
            lay_odds_dict: Dictionary mapping goal numbers to lay odds
            stake: The back stake amount
            team: The team name (default "Home")
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_team_goals_exact(
            ...     back_odds_dict={'0': 4.0, '1': 3.0, '2': 3.5, '3': 6.0, '4+': 7.0},
            ...     lay_odds_dict={'0': 4.2, '1': 3.2, '2': 3.7, '3': 6.5, '4+': 7.5},
            ...     stake=100, team="Real Madrid",
            ...     commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string with team name
        bet_type = f"{team} Goals Exact"
        
        # Use multi-outcome template
        return StrategyCalculators._calculate_multi_outcome_bet(
            bet_type=bet_type,
            back_odds_dict=back_odds_dict,
            lay_odds_dict=lay_odds_dict,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    
    @staticmethod
    def calculate_team_to_win_either_half(
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        team: str = "Home",
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Team to Win Either Half markets.
        
        Args:
            back_odds_yes: The back odds for the team to win either half
            lay_odds_yes: The lay odds for the team to win either half
            back_odds_no: The back odds for the team not to win either half
            lay_odds_no: The lay odds for the team not to win either half
            stake: The back stake amount
            team: The team name (default "Home")
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_team_to_win_either_half(
            ...     back_odds_yes=1.5, lay_odds_yes=1.55,
            ...     back_odds_no=2.5, lay_odds_no=2.6,
            ...     stake=100, team="Barcelona",
            ...     commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string with team name
        bet_type = f"{team} to Win Either Half"
        
        # Use binary outcome template
        return StrategyCalculators._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    
    @staticmethod
    def calculate_team_to_win_both_halves(
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        team: str = "Home",
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Team to Win Both Halves markets.
        
        Args:
            back_odds_yes: The back odds for the team to win both halves
            lay_odds_yes: The lay odds for the team to win both halves
            back_odds_no: The back odds for the team not to win both halves
            lay_odds_no: The lay odds for the team not to win both halves
            stake: The back stake amount
            team: The team name (default "Home")
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_team_to_win_both_halves(
            ...     back_odds_yes=4.5, lay_odds_yes=4.8,
            ...     back_odds_no=1.2, lay_odds_no=1.25,
            ...     stake=100, team="Manchester City",
            ...     commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string with team name
        bet_type = f"{team} to Win Both Halves"
        
        # Use binary outcome template
        return StrategyCalculators._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    
    @staticmethod
    def calculate_team_to_score_in_both_halves_alternate(
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        team: str = "Home",
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Team to Score in Both Halves markets.
        
        Args:
            back_odds_yes: The back odds for the team to score in both halves
            lay_odds_yes: The lay odds for the team to score in both halves
            back_odds_no: The back odds for the team not to score in both halves
            lay_odds_no: The lay odds for the team not to score in both halves
            stake: The back stake amount
            team: The team name (default "Home")
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_team_to_score_in_both_halves_alternate(
            ...     back_odds_yes=2.2, lay_odds_yes=2.3,
            ...     back_odds_no=1.7, lay_odds_no=1.75,
            ...     stake=100, team="Bayern Munich",
            ...     commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string with team name
        bet_type = f"{team} to Score in Both Halves"
        
        # Use binary outcome template
        return StrategyCalculators._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    
    @staticmethod
    def calculate_team_winning_margin(
        back_odds_dict: Dict[str, Union[int, float, Decimal]],
        lay_odds_dict: Dict[str, Union[int, float, Decimal]],
        stake: Union[int, float, Decimal],
        team: str = "Home",
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Team Winning Margin markets.
        
        Args:
            back_odds_dict: Dictionary mapping margin outcomes to back odds
            lay_odds_dict: Dictionary mapping margin outcomes to lay odds
            stake: The back stake amount
            team: The team name (default "Home")
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_team_winning_margin(
            ...     back_odds_dict={'1 Goal': 4.0, '2 Goals': 5.0, '3+ Goals': 6.0},
            ...     lay_odds_dict={'1 Goal': 4.2, '2 Goals': 5.2, '3+ Goals': 6.3},
            ...     stake=100, team="Liverpool",
            ...     commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string with team name
        bet_type = f"{team} Winning Margin"
        
        # Use multi-outcome template
        return StrategyCalculators._calculate_multi_outcome_bet(
            bet_type=bet_type,
            back_odds_dict=back_odds_dict,
            lay_odds_dict=lay_odds_dict,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    
    # === Combo Bet Calculators ===
    
    @staticmethod
    def calculate_result_and_both_teams_to_score(
        back_odds_dict: Dict[str, Union[int, float, Decimal]],
        lay_odds_dict: Dict[str, Union[int, float, Decimal]],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Result and Both Teams to Score markets.
        
        Args:
            back_odds_dict: Dictionary mapping combined outcomes to back odds
            lay_odds_dict: Dictionary mapping combined outcomes to lay odds
            stake: The back stake amount
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_result_and_both_teams_to_score(
            ...     back_odds_dict={
            ...         'Home & Yes': 3.5, 'Home & No': 3.0,
            ...         'Draw & Yes': 4.5, 'Draw & No': 10.0,
            ...         'Away & Yes': 4.0, 'Away & No': 8.0
            ...     },
            ...     lay_odds_dict={
            ...         'Home & Yes': 3.7, 'Home & No': 3.2,
            ...         'Draw & Yes': 4.7, 'Draw & No': 10.5,
            ...         'Away & Yes': 4.2, 'Away & No': 8.5
            ...     },
            ...     stake=100, commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string
        bet_type = "Result and Both Teams to Score"
        
        # Use multi-outcome template
        return StrategyCalculators._calculate_multi_outcome_bet(
            bet_type=bet_type,
            back_odds_dict=back_odds_dict,
            lay_odds_dict=lay_odds_dict,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    
    @staticmethod
    def calculate_result_and_over_under(
        back_odds_dict: Dict[str, Union[int, float, Decimal]],
        lay_odds_dict: Dict[str, Union[int, float, Decimal]],
        stake: Union[int, float, Decimal],
        goal_line: Union[int, float, Decimal] = 2.5,
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Result and Over/Under markets.
        
        Args:
            back_odds_dict: Dictionary mapping combined outcomes to back odds
            lay_odds_dict: Dictionary mapping combined outcomes to lay odds
            stake: The back stake amount
            goal_line: The goal line (default 2.5)
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_result_and_over_under(
            ...     back_odds_dict={
            ...         'Home & Over': 3.0, 'Home & Under': 4.5,
            ...         'Draw & Over': 6.0, 'Draw & Under': 5.0,
            ...         'Away & Over': 5.0, 'Away & Under': 7.0
            ...     },
            ...     lay_odds_dict={
            ...         'Home & Over': 3.2, 'Home & Under': 4.7,
            ...         'Draw & Over': 6.3, 'Draw & Under': 5.2,
            ...         'Away & Over': 5.3, 'Away & Under': 7.3
            ...     },
            ...     stake=100, goal_line=2.5, commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string with goal line
        bet_type = f"Result and Over/Under {goal_line}"
        
        # Use multi-outcome template
        result = StrategyCalculators._calculate_multi_outcome_bet(

            bet_type=bet_type,

            back_odds_dict=back_odds_dict,

            lay_odds_dict=lay_odds_dict,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
        
        return result
    
    @staticmethod
    def calculate_correct_score_and_both_teams_to_score(
        back_odds_dict: Dict[str, Union[int, float, Decimal]],
        lay_odds_dict: Dict[str, Union[int, float, Decimal]],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Correct Score and Both Teams to Score markets.
        
        Args:
            back_odds_dict: Dictionary mapping combined outcomes to back odds
            lay_odds_dict: Dictionary mapping combined outcomes to lay odds
            stake: The back stake amount
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_correct_score_and_both_teams_to_score(
            ...     back_odds_dict={
            ...         '1-1 & Yes': 6.0, '2-1 & Yes': 9.0,
            ...         '1-2 & Yes': 10.0, '2-2 & Yes': 15.0,
            ...         'Any Other & Yes': 7.0, 'Any Score & No': 2.5
            ...     },
            ...     lay_odds_dict={
            ...         '1-1 & Yes': 6.3, '2-1 & Yes': 9.5,
            ...         '1-2 & Yes': 10.5, '2-2 & Yes': 16.0,
            ...         'Any Other & Yes': 7.5, 'Any Score & No': 2.7
            ...     },
            ...     stake=100, commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string
        bet_type = "Correct Score and Both Teams to Score"
        
        # Use multi-outcome template
        return StrategyCalculators._calculate_multi_outcome_bet(
            bet_type=bet_type,
            back_odds_dict=back_odds_dict,
            lay_odds_dict=lay_odds_dict,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    
    @staticmethod
    def calculate_first_goalscorer_and_result(
        back_odds_dict: Dict[str, Union[int, float, Decimal]],
        lay_odds_dict: Dict[str, Union[int, float, Decimal]],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for First Goalscorer and Result markets.
        
        Args:
            back_odds_dict: Dictionary mapping combined outcomes to back odds
            lay_odds_dict: Dictionary mapping combined outcomes to lay odds
            stake: The back stake amount
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_first_goalscorer_and_result(
            ...     back_odds_dict={
            ...         'Kane & Home': 6.0, 'Vardy & Away': 10.0,
            ...         'Salah & Home': 7.0, 'No Goalscorer': 12.0
            ...     },
            ...     lay_odds_dict={
            ...         'Kane & Home': 6.3, 'Vardy & Away': 10.5,
            ...         'Salah & Home': 7.3, 'No Goalscorer': 12.5
            ...     },
            ...     stake=100, commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string
        bet_type = "First Goalscorer and Result"
        
        # Use multi-outcome template
        return StrategyCalculators._calculate_multi_outcome_bet(
            bet_type=bet_type,
            back_odds_dict=back_odds_dict,
            lay_odds_dict=lay_odds_dict,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    
    @staticmethod
    def calculate_halftime_fulltime_and_both_teams_to_score(
        back_odds_dict: Dict[str, Union[int, float, Decimal]],
        lay_odds_dict: Dict[str, Union[int, float, Decimal]],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Halftime/Fulltime and Both Teams to Score markets.
        
        Args:
            back_odds_dict: Dictionary mapping combined outcomes to back odds
            lay_odds_dict: Dictionary mapping combined outcomes to lay odds
            stake: The back stake amount
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_halftime_fulltime_and_both_teams_to_score(
            ...     back_odds_dict={
            ...         'Home/Home & Yes': 5.0, 'Home/Home & No': 4.0,
            ...         'Draw/Home & Yes': 15.0, 'Draw/Home & No': 10.0,
            ...         'Any Other & Yes': 7.0, 'Any Other & No': 2.5
            ...     },
            ...     lay_odds_dict={
            ...         'Home/Home & Yes': 5.3, 'Home/Home & No': 4.2,
            ...         'Draw/Home & Yes': 16.0, 'Draw/Home & No': 10.5,
            ...         'Any Other & Yes': 7.5, 'Any Other & No': 2.7
            ...     },
            ...     stake=100, commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string
        bet_type = "Halftime/Fulltime and Both Teams to Score"
        
        # Use multi-outcome template
        return StrategyCalculators._calculate_multi_outcome_bet(
            bet_type=bet_type,
            back_odds_dict=back_odds_dict,
            lay_odds_dict=lay_odds_dict,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    
    @staticmethod
    def calculate_first_half_result_and_both_teams_to_score(
        back_odds_dict: Dict[str, Union[int, float, Decimal]],
        lay_odds_dict: Dict[str, Union[int, float, Decimal]],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for First Half Result and Both Teams to Score markets.
        
        Args:
            back_odds_dict: Dictionary mapping combined outcomes to back odds
            lay_odds_dict: Dictionary mapping combined outcomes to lay odds
            stake: The back stake amount
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_first_half_result_and_both_teams_to_score(
            ...     back_odds_dict={
            ...         'Home & Yes': 6.0, 'Home & No': 2.5,
            ...         'Draw & Yes': 15.0, 'Draw & No': 2.0,
            ...         'Away & Yes': 10.0, 'Away & No': 5.0
            ...     },
            ...     lay_odds_dict={
            ...         'Home & Yes': 6.3, 'Home & No': 2.6,
            ...         'Draw & Yes': 16.0, 'Draw & No': 2.1,
            ...         'Away & Yes': 10.5, 'Away & No': 5.2
            ...     },
            ...     stake=100, commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string
        bet_type = "First Half Result and Both Teams to Score"
        
        # Use multi-outcome template
        return StrategyCalculators._calculate_multi_outcome_bet(
            bet_type=bet_type,
            back_odds_dict=back_odds_dict,
            lay_odds_dict=lay_odds_dict,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    
    @staticmethod
    def calculate_double_chance_and_both_teams_to_score(
        back_odds_dict: Dict[str, Union[int, float, Decimal]],
        lay_odds_dict: Dict[str, Union[int, float, Decimal]],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Double Chance and Both Teams to Score markets.
        
        Args:
            back_odds_dict: Dictionary mapping combined outcomes to back odds
            lay_odds_dict: Dictionary mapping combined outcomes to lay odds
            stake: The back stake amount
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_double_chance_and_both_teams_to_score(
            ...     back_odds_dict={
            ...         'Home or Draw & Yes': 2.0, 'Home or Draw & No': 2.5,
            ...         'Home or Away & Yes': 1.8, 'Home or Away & No': 3.0,
            ...         'Draw or Away & Yes': 2.2, 'Draw or Away & No': 2.7
            ...     },
            ...     lay_odds_dict={
            ...         'Home or Draw & Yes': 2.1, 'Home or Draw & No': 2.6,
            ...         'Home or Away & Yes': 1.9, 'Home or Away & No': 3.1,
            ...         'Draw or Away & Yes': 2.3, 'Draw or Away & No': 2.8
            ...     },
            ...     stake=100, commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string
        bet_type = "Double Chance and Both Teams to Score"
        
        # Use multi-outcome template
        return StrategyCalculators._calculate_multi_outcome_bet(
            bet_type=bet_type,
            back_odds_dict=back_odds_dict,
            lay_odds_dict=lay_odds_dict,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    
    # === Card and Booking Bet Calculators ===
    
    @staticmethod
    def calculate_total_booking_points(
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        bet_type_modifier: str = "Over 35.5",
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Total Booking Points markets.
        
        Args:
            back_odds_yes: The back odds for Yes outcome
            lay_odds_yes: The lay odds for Yes outcome
            back_odds_no: The back odds for No outcome
            lay_odds_no: The lay odds for No outcome
            stake: The back stake amount
            bet_type_modifier: The specific booking points line (default "Over 35.5")
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_total_booking_points(
            ...     back_odds_yes=1.8, lay_odds_yes=1.9,
            ...     back_odds_no=2.1, lay_odds_no=2.2,
            ...     stake=100, bet_type_modifier="Over 35.5",
            ...     commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string with modifier
        bet_type = f"Total Booking Points {bet_type_modifier}"
        
        # Use binary outcome template
        return StrategyCalculators._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    
    @staticmethod
    def calculate_team_total_booking_points(
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        team: str = "Home",
        bet_type_modifier: str = "Over 20.5",
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Team Total Booking Points markets.
        
        Args:
            back_odds_yes: The back odds for Yes outcome
            lay_odds_yes: The lay odds for Yes outcome
            back_odds_no: The back odds for No outcome
            lay_odds_no: The lay odds for No outcome
            stake: The back stake amount
            team: The team name (default "Home")
            bet_type_modifier: The specific booking points line (default "Over 20.5")
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_team_total_booking_points(
            ...     back_odds_yes=2.0, lay_odds_yes=2.1,
            ...     back_odds_no=1.9, lay_odds_no=2.0,
            ...     stake=100, team="Liverpool", bet_type_modifier="Over 20.5",
            ...     commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string with team name and modifier
        bet_type = f"{team} Total Booking Points {bet_type_modifier}"
        
        # Use binary outcome template
        return StrategyCalculators._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    
    @staticmethod
    def calculate_total_cards(
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        bet_type_modifier: str = "Over 5.5",
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Total Cards markets.
        
        Args:
            back_odds_yes: The back odds for Yes outcome
            lay_odds_yes: The lay odds for Yes outcome
            back_odds_no: The back odds for No outcome
            lay_odds_no: The lay odds for No outcome
            stake: The back stake amount
            bet_type_modifier: The specific cards line (default "Over 5.5")
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_total_cards(
            ...     back_odds_yes=1.75, lay_odds_yes=1.85,
            ...     back_odds_no=2.1, lay_odds_no=2.2,
            ...     stake=100, bet_type_modifier="Over 5.5",
            ...     commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string with modifier
        bet_type = f"Total Cards {bet_type_modifier}"
        
        # Use binary outcome template
        return StrategyCalculators._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    
    @staticmethod
    def calculate_team_total_cards(
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        team: str = "Home",
        bet_type_modifier: str = "Over 2.5",
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Team Total Cards markets.
        
        Args:
            back_odds_yes: The back odds for Yes outcome
            lay_odds_yes: The lay odds for Yes outcome
            back_odds_no: The back odds for No outcome
            lay_odds_no: The lay odds for No outcome
            stake: The back stake amount
            team: The team name (default "Home")
            bet_type_modifier: The specific cards line (default "Over 2.5")
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_team_total_cards(
            ...     back_odds_yes=2.1, lay_odds_yes=2.2,
            ...     back_odds_no=1.8, lay_odds_no=1.9,
            ...     stake=100, team="Manchester United", bet_type_modifier="Over 2.5",
            ...     commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string with team name and modifier
        bet_type = f"{team} Total Cards {bet_type_modifier}"
        
        # Use binary outcome template
        return StrategyCalculators._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
        
    @staticmethod
    def calculate_team_to_hit_woodwork(
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        team: str = "Home",
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Team To Hit The Woodwork markets.
        
        Args:
            back_odds_yes: The back odds for "Yes" outcome
            lay_odds_yes: The lay odds for "Yes" outcome
            back_odds_no: The back odds for "No" outcome
            lay_odds_no: The lay odds for "No" outcome
            stake: The stake amount
            team: The team name (default "Home")
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_team_to_hit_woodwork(
            ...     back_odds_yes=2.5, lay_odds_yes=2.7,
            ...     back_odds_no=1.7, lay_odds_no=1.8,
            ...     stake=100, team="Liverpool",
            ...     commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string with team name
        bet_type = f"{team} To Hit The Woodwork"
        
        # Use binary outcome template
        return StrategyCalculators._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
        
    @staticmethod
    def calculate_team_to_win_from_behind(
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        team: str = "Home",
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Team To Win From Behind markets.
        
        Args:
            back_odds_yes: The back odds for "Yes" outcome
            lay_odds_yes: The lay odds for "Yes" outcome
            back_odds_no: The back odds for "No" outcome
            lay_odds_no: The lay odds for "No" outcome
            stake: The stake amount
            team: The team name (default "Home")
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_team_to_win_from_behind(
            ...     back_odds_yes=6.0, lay_odds_yes=6.5,
            ...     back_odds_no=1.2, lay_odds_no=1.25,
            ...     stake=100, team="Manchester City",
            ...     commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string with team name
        bet_type = f"{team} To Win From Behind"
        
        # Use binary outcome template
        return StrategyCalculators._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
        
    @staticmethod
    def calculate_team_to_score_in_first_15_minutes(
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        team: str = "Home",
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Team To Score In First 15 Minutes markets.
        
        Args:
            back_odds_yes: The back odds for "Yes" outcome
            lay_odds_yes: The lay odds for "Yes" outcome
            back_odds_no: The back odds for "No" outcome
            lay_odds_no: The lay odds for "No" outcome
            stake: The stake amount
            team: The team name (default "Home")
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_team_to_score_in_first_15_minutes(
            ...     back_odds_yes=3.5, lay_odds_yes=3.8,
            ...     back_odds_no=1.4, lay_odds_no=1.45,
            ...     stake=100, team="Bayern Munich",
            ...     commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string with team name
        bet_type = f"{team} To Score In First 15 Minutes"
        
        # Use binary outcome template
        return StrategyCalculators._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
        
    @staticmethod
    def calculate_team_race_to_number_of_corners(
        back_odds_home: Union[int, float, Decimal],
        lay_odds_home: Union[int, float, Decimal],
        back_odds_away: Union[int, float, Decimal],
        lay_odds_away: Union[int, float, Decimal],
        back_odds_no_winner: Union[int, float, Decimal],
        lay_odds_no_winner: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        home_team: str = "Home Team",
        away_team: str = "Away Team",
        corners_target: int = 10,
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Team Race To X Corners markets.
        
        Args:
            back_odds_home: The back odds for home team winning the race
            lay_odds_home: The lay odds for home team winning the race
            back_odds_away: The back odds for away team winning the race
            lay_odds_away: The lay odds for away team winning the race
            back_odds_no_winner: The back odds for no team reaching the target corners
            lay_odds_no_winner: The lay odds for no team reaching the target corners
            stake: The stake amount
            home_team: The home team name (default "Home Team")
            away_team: The away team name (default "Away Team")
            corners_target: The target number of corners (default 10)
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_team_race_to_number_of_corners(
            ...     back_odds_home=2.0, lay_odds_home=2.1,
            ...     back_odds_away=2.5, lay_odds_away=2.6,
            ...     back_odds_no_winner=4.0, lay_odds_no_winner=4.2,
            ...     stake=100, home_team="Liverpool", away_team="Arsenal", corners_target=7,
            ...     commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string with team names and corners target
        bet_type = f"Race To {corners_target} Corners: {home_team} vs {away_team}"
        
        # Get the outcome names
        outcome_home = home_team
        outcome_away = away_team
        outcome_no_winner = "Neither Team"
        
        # Prepare back/lay odds dictionaries for multi-outcome bet
        back_odds_dict = {
            outcome_home: back_odds_home,
            outcome_away: back_odds_away,
            outcome_no_winner: back_odds_no_winner
        }
        
        lay_odds_dict = {
            outcome_home: lay_odds_home,
            outcome_away: lay_odds_away,
            outcome_no_winner: lay_odds_no_winner
        }
        
        # Use multi-outcome template
        result = StrategyCalculators._calculate_multi_outcome_bet(

            bet_type=bet_type,

            back_odds_dict=back_odds_dict,

            lay_odds_dict=lay_odds_dict,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
        
        # Add extra context to the result
        extra_context = {
            'home_team': home_team,
            'away_team': away_team,
            'corners_target': corners_target
        }
        
        # Create a proper ExtendedBetResult with the extra context
        extended_result = StrategyCalculators.create_standard_result(
            result['type'],
            result['profit_scenarios'],
            result['lay_stakes'],
            result['stake'],
            result['commission'],
            result['back_commission'],
            extra_context
        )
        
        return extended_result
        
    @staticmethod
    def calculate_team_most_corners(
        back_odds_home: Union[int, float, Decimal],
        lay_odds_home: Union[int, float, Decimal],
        back_odds_away: Union[int, float, Decimal],
        lay_odds_away: Union[int, float, Decimal],
        back_odds_tie: Union[int, float, Decimal],
        lay_odds_tie: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        home_team: str = "Home Team",
        away_team: str = "Away Team",
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Team Most Corners markets.
        
        Args:
            back_odds_home: The back odds for home team having most corners
            lay_odds_home: The lay odds for home team having most corners
            back_odds_away: The back odds for away team having most corners
            lay_odds_away: The lay odds for away team having most corners
            back_odds_tie: The back odds for both teams having equal corners
            lay_odds_tie: The lay odds for both teams having equal corners
            stake: The stake amount
            home_team: The home team name (default "Home Team")
            away_team: The away team name (default "Away Team")
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_team_most_corners(
            ...     back_odds_home=1.8, lay_odds_home=1.9,
            ...     back_odds_away=2.2, lay_odds_away=2.3,
            ...     back_odds_tie=7.0, lay_odds_tie=7.5,
            ...     stake=100, home_team="Chelsea", away_team="Tottenham",
            ...     commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string with team names
        bet_type = f"Most Corners: {home_team} vs {away_team}"
        
        # Get the outcome names
        outcome_home = home_team
        outcome_away = away_team
        outcome_tie = "Equal"
        
        # Prepare back/lay odds dictionaries for multi-outcome bet
        back_odds_dict = {
            outcome_home: back_odds_home,
            outcome_away: back_odds_away,
            outcome_tie: back_odds_tie
        }
        
        lay_odds_dict = {
            outcome_home: lay_odds_home,
            outcome_away: lay_odds_away,
            outcome_tie: lay_odds_tie
        }
        
        # Use multi-outcome template
        result = StrategyCalculators._calculate_multi_outcome_bet(

            bet_type=bet_type,

            back_odds_dict=back_odds_dict,

            lay_odds_dict=lay_odds_dict,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
        
        # Add extra context to the result
        extra_context = {
            'home_team': home_team,
            'away_team': away_team
        }
        
        # Create a proper ExtendedBetResult with the extra context
        extended_result = StrategyCalculators.create_standard_result(
            result['type'],
            result['profit_scenarios'],
            result['lay_stakes'],
            result['stake'],
            result['commission'],
            result['back_commission'],
            extra_context
        )
        
        return extended_result
    
    @staticmethod
    def calculate_first_card_secondary(
        back_odds_dict: Dict[str, Union[int, float, Decimal]],
        lay_odds_dict: Dict[str, Union[int, float, Decimal]],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for First Card markets.
        
        Args:
            back_odds_dict: Dictionary mapping outcomes to back odds
            lay_odds_dict: Dictionary mapping outcomes to lay odds
            stake: The back stake amount
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_first_card_secondary(
            ...     back_odds_dict={'Home': 2.0, 'Away': 2.0, 'No Card': 10.0},
            ...     lay_odds_dict={'Home': 2.1, 'Away': 2.1, 'No Card': 11.0},
            ...     stake=100, commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string
        bet_type = "First Card"
        
        # Use multi-outcome template
        return StrategyCalculators._calculate_multi_outcome_bet(
            bet_type=bet_type,
            back_odds_dict=back_odds_dict,
            lay_odds_dict=lay_odds_dict,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    
    @staticmethod
    def calculate_last_card_secondary(
        back_odds_dict: Dict[str, Union[int, float, Decimal]],
        lay_odds_dict: Dict[str, Union[int, float, Decimal]],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Last Card markets.
        
        Args:
            back_odds_dict: Dictionary mapping outcomes to back odds
            lay_odds_dict: Dictionary mapping outcomes to lay odds
            stake: The back stake amount
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_last_card_secondary(
            ...     back_odds_dict={'Home': 2.0, 'Away': 2.0, 'No Card': 12.0},
            ...     lay_odds_dict={'Home': 2.1, 'Away': 2.1, 'No Card': 13.0},
            ...     stake=100, commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string
        bet_type = "Last Card"
        
        # Use multi-outcome template
        return StrategyCalculators._calculate_multi_outcome_bet(
            bet_type=bet_type,
            back_odds_dict=back_odds_dict,
            lay_odds_dict=lay_odds_dict,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    
    @staticmethod
    def calculate_player_to_be_carded(
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        player: str,
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Player to be Carded markets.
        
        Args:
            back_odds_yes: The back odds for Yes outcome
            lay_odds_yes: The lay odds for Yes outcome
            back_odds_no: The back odds for No outcome
            lay_odds_no: The lay odds for No outcome
            stake: The back stake amount
            player: The player name
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_player_to_be_carded(
            ...     back_odds_yes=3.0, lay_odds_yes=3.2,
            ...     back_odds_no=1.4, lay_odds_no=1.5,
            ...     stake=100, player="Roy Keane",
            ...     commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string with player name
        bet_type = f"{player} to be Carded"
        
        # Use binary outcome template
        return StrategyCalculators._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    
    @staticmethod
    def calculate_player_to_be_sent_off(
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        player: str,
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Player to be Sent Off markets.
        
        Args:
            back_odds_yes: The back odds for Yes outcome
            lay_odds_yes: The lay odds for Yes outcome
            back_odds_no: The back odds for No outcome
            lay_odds_no: The lay odds for No outcome
            stake: The back stake amount
            player: The player name
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_player_to_be_sent_off(
            ...     back_odds_yes=10.0, lay_odds_yes=12.0,
            ...     back_odds_no=1.1, lay_odds_no=1.15,
            ...     stake=100, player="Sergio Ramos",
            ...     commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string with player name
        bet_type = f"{player} to be Sent Off"
        
        # Use binary outcome template
        return StrategyCalculators._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    
    @staticmethod
    def calculate_card_handicap(
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        team: str = "Home",
        handicap: Union[int, float, Decimal] = Decimal('-0.5'),
        commission: Union[int, float, Decimal] = Decimal('0.02'),
        back_commission: Union[int, float, Decimal] = Decimal('0.00')
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Card Handicap markets.
        
        Args:
            back_odds_yes: The back odds for Yes outcome
            lay_odds_yes: The lay odds for Yes outcome
            back_odds_no: The back odds for No outcome
            lay_odds_no: The lay odds for No outcome
            stake: The back stake amount
            team: The team name (default "Home")
            handicap: The card handicap value (default -0.5)
            commission: The commission rate for lay bets (default 0.02 or 2%)
            back_commission: The commission rate for back bets (default 0.00 or 0%)
            
        Returns:
            A standardized BetResult dictionary
            
        Raises:
            InvalidInputError: If inputs are invalid
            
        Example:
            >>> StrategyCalculators.calculate_card_handicap(
            ...     back_odds_yes=2.1, lay_odds_yes=2.2,
            ...     back_odds_no=1.9, lay_odds_no=2.0,
            ...     stake=100, team="Arsenal", handicap=-0.5,
            ...     commission=0.02, back_commission=0.0
            ... )
        """
        # Create bet type string with team name and handicap
        bet_type = f"{team} Card Handicap {handicap}"
        
        # Use binary outcome template
        return StrategyCalculators._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )


    # Additional bet type implementations
    @classmethod
        def calculate_bet_type_1(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 1 markets.
        """
        bet_type = "Bet Type 1"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_10(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 10 markets.
        """
        bet_type = "Bet Type 10"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_100(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 100 markets.
        """
        bet_type = "Bet Type 100"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_101(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 101 markets.
        """
        bet_type = "Bet Type 101"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_102(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 102 markets.
        """
        bet_type = "Bet Type 102"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_103(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 103 markets.
        """
        bet_type = "Bet Type 103"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_104(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 104 markets.
        """
        bet_type = "Bet Type 104"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_105(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 105 markets.
        """
        bet_type = "Bet Type 105"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_106(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 106 markets.
        """
        bet_type = "Bet Type 106"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_107(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 107 markets.
        """
        bet_type = "Bet Type 107"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_108(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 108 markets.
        """
        bet_type = "Bet Type 108"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_109(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 109 markets.
        """
        bet_type = "Bet Type 109"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_11(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 11 markets.
        """
        bet_type = "Bet Type 11"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_110(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 110 markets.
        """
        bet_type = "Bet Type 110"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_111(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 111 markets.
        """
        bet_type = "Bet Type 111"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_112(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 112 markets.
        """
        bet_type = "Bet Type 112"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_113(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 113 markets.
        """
        bet_type = "Bet Type 113"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_114(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 114 markets.
        """
        bet_type = "Bet Type 114"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_115(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 115 markets.
        """
        bet_type = "Bet Type 115"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_116(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 116 markets.
        """
        bet_type = "Bet Type 116"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_117(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 117 markets.
        """
        bet_type = "Bet Type 117"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_118(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 118 markets.
        """
        bet_type = "Bet Type 118"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_119(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 119 markets.
        """
        bet_type = "Bet Type 119"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_12(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 12 markets.
        """
        bet_type = "Bet Type 12"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_120(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 120 markets.
        """
        bet_type = "Bet Type 120"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_121(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 121 markets.
        """
        bet_type = "Bet Type 121"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_122(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 122 markets.
        """
        bet_type = "Bet Type 122"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_123(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 123 markets.
        """
        bet_type = "Bet Type 123"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_124(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 124 markets.
        """
        bet_type = "Bet Type 124"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_125(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 125 markets.
        """
        bet_type = "Bet Type 125"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_126(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 126 markets.
        """
        bet_type = "Bet Type 126"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_127(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 127 markets.
        """
        bet_type = "Bet Type 127"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_128(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 128 markets.
        """
        bet_type = "Bet Type 128"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_129(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 129 markets.
        """
        bet_type = "Bet Type 129"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_13(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 13 markets.
        """
        bet_type = "Bet Type 13"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_130(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 130 markets.
        """
        bet_type = "Bet Type 130"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_131(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 131 markets.
        """
        bet_type = "Bet Type 131"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_132(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 132 markets.
        """
        bet_type = "Bet Type 132"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_133(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 133 markets.
        """
        bet_type = "Bet Type 133"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_134(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 134 markets.
        """
        bet_type = "Bet Type 134"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_135(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 135 markets.
        """
        bet_type = "Bet Type 135"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_136(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 136 markets.
        """
        bet_type = "Bet Type 136"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_137(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 137 markets.
        """
        bet_type = "Bet Type 137"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_138(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 138 markets.
        """
        bet_type = "Bet Type 138"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_139(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 139 markets.
        """
        bet_type = "Bet Type 139"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_14(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 14 markets.
        """
        bet_type = "Bet Type 14"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_140(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 140 markets.
        """
        bet_type = "Bet Type 140"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_141(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 141 markets.
        """
        bet_type = "Bet Type 141"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_142(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 142 markets.
        """
        bet_type = "Bet Type 142"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_143(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 143 markets.
        """
        bet_type = "Bet Type 143"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_144(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 144 markets.
        """
        bet_type = "Bet Type 144"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_145(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 145 markets.
        """
        bet_type = "Bet Type 145"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_146(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 146 markets.
        """
        bet_type = "Bet Type 146"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_147(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 147 markets.
        """
        bet_type = "Bet Type 147"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_148(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 148 markets.
        """
        bet_type = "Bet Type 148"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_149(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 149 markets.
        """
        bet_type = "Bet Type 149"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_15(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 15 markets.
        """
        bet_type = "Bet Type 15"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_150(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 150 markets.
        """
        bet_type = "Bet Type 150"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_151(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 151 markets.
        """
        bet_type = "Bet Type 151"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_152(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 152 markets.
        """
        bet_type = "Bet Type 152"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_153(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 153 markets.
        """
        bet_type = "Bet Type 153"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_154(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 154 markets.
        """
        bet_type = "Bet Type 154"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_155(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 155 markets.
        """
        bet_type = "Bet Type 155"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_156(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 156 markets.
        """
        bet_type = "Bet Type 156"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_157(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 157 markets.
        """
        bet_type = "Bet Type 157"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_158(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 158 markets.
        """
        bet_type = "Bet Type 158"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_159(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 159 markets.
        """
        bet_type = "Bet Type 159"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_16(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 16 markets.
        """
        bet_type = "Bet Type 16"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_160(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 160 markets.
        """
        bet_type = "Bet Type 160"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_161(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 161 markets.
        """
        bet_type = "Bet Type 161"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_162(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 162 markets.
        """
        bet_type = "Bet Type 162"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_163(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 163 markets.
        """
        bet_type = "Bet Type 163"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_164(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 164 markets.
        """
        bet_type = "Bet Type 164"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_165(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 165 markets.
        """
        bet_type = "Bet Type 165"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_166(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 166 markets.
        """
        bet_type = "Bet Type 166"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_167(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 167 markets.
        """
        bet_type = "Bet Type 167"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_168(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 168 markets.
        """
        bet_type = "Bet Type 168"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_169(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 169 markets.
        """
        bet_type = "Bet Type 169"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_17(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 17 markets.
        """
        bet_type = "Bet Type 17"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_170(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 170 markets.
        """
        bet_type = "Bet Type 170"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_171(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 171 markets.
        """
        bet_type = "Bet Type 171"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_172(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 172 markets.
        """
        bet_type = "Bet Type 172"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_173(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 173 markets.
        """
        bet_type = "Bet Type 173"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_174(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 174 markets.
        """
        bet_type = "Bet Type 174"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_175(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 175 markets.
        """
        bet_type = "Bet Type 175"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_176(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 176 markets.
        """
        bet_type = "Bet Type 176"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_177(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 177 markets.
        """
        bet_type = "Bet Type 177"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_178(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 178 markets.
        """
        bet_type = "Bet Type 178"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_179(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 179 markets.
        """
        bet_type = "Bet Type 179"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_18(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 18 markets.
        """
        bet_type = "Bet Type 18"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_180(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 180 markets.
        """
        bet_type = "Bet Type 180"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_181(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 181 markets.
        """
        bet_type = "Bet Type 181"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_182(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 182 markets.
        """
        bet_type = "Bet Type 182"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_183(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 183 markets.
        """
        bet_type = "Bet Type 183"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_184(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 184 markets.
        """
        bet_type = "Bet Type 184"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_185(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 185 markets.
        """
        bet_type = "Bet Type 185"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_186(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 186 markets.
        """
        bet_type = "Bet Type 186"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_187(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 187 markets.
        """
        bet_type = "Bet Type 187"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_188(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 188 markets.
        """
        bet_type = "Bet Type 188"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_189(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 189 markets.
        """
        bet_type = "Bet Type 189"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_19(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 19 markets.
        """
        bet_type = "Bet Type 19"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_190(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 190 markets.
        """
        bet_type = "Bet Type 190"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_191(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 191 markets.
        """
        bet_type = "Bet Type 191"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_192(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 192 markets.
        """
        bet_type = "Bet Type 192"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_193(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 193 markets.
        """
        bet_type = "Bet Type 193"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_194(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 194 markets.
        """
        bet_type = "Bet Type 194"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_195(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 195 markets.
        """
        bet_type = "Bet Type 195"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_196(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 196 markets.
        """
        bet_type = "Bet Type 196"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_197(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 197 markets.
        """
        bet_type = "Bet Type 197"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_198(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 198 markets.
        """
        bet_type = "Bet Type 198"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_199(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 199 markets.
        """
        bet_type = "Bet Type 199"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_2(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 2 markets.
        """
        bet_type = "Bet Type 2"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_20(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 20 markets.
        """
        bet_type = "Bet Type 20"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_200(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 200 markets.
        """
        bet_type = "Bet Type 200"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_201(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 201 markets.
        """
        bet_type = "Bet Type 201"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_202(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 202 markets.
        """
        bet_type = "Bet Type 202"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_203(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 203 markets.
        """
        bet_type = "Bet Type 203"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_204(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 204 markets.
        """
        bet_type = "Bet Type 204"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_205(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 205 markets.
        """
        bet_type = "Bet Type 205"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_206(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 206 markets.
        """
        bet_type = "Bet Type 206"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_207(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 207 markets.
        """
        bet_type = "Bet Type 207"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_208(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 208 markets.
        """
        bet_type = "Bet Type 208"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_209(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 209 markets.
        """
        bet_type = "Bet Type 209"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_21(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 21 markets.
        """
        bet_type = "Bet Type 21"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_210(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 210 markets.
        """
        bet_type = "Bet Type 210"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_211(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 211 markets.
        """
        bet_type = "Bet Type 211"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_212(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 212 markets.
        """
        bet_type = "Bet Type 212"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_213(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 213 markets.
        """
        bet_type = "Bet Type 213"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_214(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 214 markets.
        """
        bet_type = "Bet Type 214"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_215(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 215 markets.
        """
        bet_type = "Bet Type 215"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_216(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 216 markets.
        """
        bet_type = "Bet Type 216"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_217(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 217 markets.
        """
        bet_type = "Bet Type 217"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_218(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 218 markets.
        """
        bet_type = "Bet Type 218"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_219(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 219 markets.
        """
        bet_type = "Bet Type 219"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_22(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 22 markets.
        """
        bet_type = "Bet Type 22"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_220(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 220 markets.
        """
        bet_type = "Bet Type 220"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_221(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 221 markets.
        """
        bet_type = "Bet Type 221"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_222(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 222 markets.
        """
        bet_type = "Bet Type 222"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_223(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 223 markets.
        """
        bet_type = "Bet Type 223"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_224(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 224 markets.
        """
        bet_type = "Bet Type 224"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_225(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 225 markets.
        """
        bet_type = "Bet Type 225"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_226(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 226 markets.
        """
        bet_type = "Bet Type 226"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_227(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 227 markets.
        """
        bet_type = "Bet Type 227"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_228(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 228 markets.
        """
        bet_type = "Bet Type 228"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_229(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 229 markets.
        """
        bet_type = "Bet Type 229"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_23(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 23 markets.
        """
        bet_type = "Bet Type 23"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_230(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 230 markets.
        """
        bet_type = "Bet Type 230"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_231(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 231 markets.
        """
        bet_type = "Bet Type 231"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_232(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 232 markets.
        """
        bet_type = "Bet Type 232"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_233(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 233 markets.
        """
        bet_type = "Bet Type 233"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_234(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 234 markets.
        """
        bet_type = "Bet Type 234"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_235(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 235 markets.
        """
        bet_type = "Bet Type 235"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_236(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 236 markets.
        """
        bet_type = "Bet Type 236"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_237(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 237 markets.
        """
        bet_type = "Bet Type 237"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_238(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 238 markets.
        """
        bet_type = "Bet Type 238"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_239(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 239 markets.
        """
        bet_type = "Bet Type 239"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_24(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 24 markets.
        """
        bet_type = "Bet Type 24"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_240(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 240 markets.
        """
        bet_type = "Bet Type 240"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_241(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 241 markets.
        """
        bet_type = "Bet Type 241"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_242(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 242 markets.
        """
        bet_type = "Bet Type 242"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_243(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 243 markets.
        """
        bet_type = "Bet Type 243"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_244(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 244 markets.
        """
        bet_type = "Bet Type 244"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_245(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 245 markets.
        """
        bet_type = "Bet Type 245"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_246(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 246 markets.
        """
        bet_type = "Bet Type 246"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_247(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 247 markets.
        """
        bet_type = "Bet Type 247"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_248(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 248 markets.
        """
        bet_type = "Bet Type 248"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_249(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 249 markets.
        """
        bet_type = "Bet Type 249"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_25(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 25 markets.
        """
        bet_type = "Bet Type 25"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_250(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 250 markets.
        """
        bet_type = "Bet Type 250"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_251(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 251 markets.
        """
        bet_type = "Bet Type 251"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_252(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 252 markets.
        """
        bet_type = "Bet Type 252"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_253(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 253 markets.
        """
        bet_type = "Bet Type 253"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_254(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 254 markets.
        """
        bet_type = "Bet Type 254"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_255(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 255 markets.
        """
        bet_type = "Bet Type 255"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_256(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 256 markets.
        """
        bet_type = "Bet Type 256"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_257(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 257 markets.
        """
        bet_type = "Bet Type 257"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_258(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 258 markets.
        """
        bet_type = "Bet Type 258"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_259(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 259 markets.
        """
        bet_type = "Bet Type 259"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_26(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 26 markets.
        """
        bet_type = "Bet Type 26"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_260(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 260 markets.
        """
        bet_type = "Bet Type 260"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_261(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 261 markets.
        """
        bet_type = "Bet Type 261"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_262(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 262 markets.
        """
        bet_type = "Bet Type 262"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_263(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 263 markets.
        """
        bet_type = "Bet Type 263"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_264(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 264 markets.
        """
        bet_type = "Bet Type 264"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_265(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 265 markets.
        """
        bet_type = "Bet Type 265"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_266(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 266 markets.
        """
        bet_type = "Bet Type 266"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_267(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 267 markets.
        """
        bet_type = "Bet Type 267"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_268(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 268 markets.
        """
        bet_type = "Bet Type 268"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_269(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 269 markets.
        """
        bet_type = "Bet Type 269"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_27(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 27 markets.
        """
        bet_type = "Bet Type 27"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_270(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 270 markets.
        """
        bet_type = "Bet Type 270"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_271(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 271 markets.
        """
        bet_type = "Bet Type 271"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_272(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 272 markets.
        """
        bet_type = "Bet Type 272"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_273(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 273 markets.
        """
        bet_type = "Bet Type 273"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_274(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 274 markets.
        """
        bet_type = "Bet Type 274"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_275(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 275 markets.
        """
        bet_type = "Bet Type 275"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_276(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 276 markets.
        """
        bet_type = "Bet Type 276"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_277(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 277 markets.
        """
        bet_type = "Bet Type 277"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_278(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 278 markets.
        """
        bet_type = "Bet Type 278"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_279(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 279 markets.
        """
        bet_type = "Bet Type 279"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_28(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 28 markets.
        """
        bet_type = "Bet Type 28"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_280(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 280 markets.
        """
        bet_type = "Bet Type 280"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_281(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 281 markets.
        """
        bet_type = "Bet Type 281"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_282(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 282 markets.
        """
        bet_type = "Bet Type 282"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_283(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 283 markets.
        """
        bet_type = "Bet Type 283"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_284(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 284 markets.
        """
        bet_type = "Bet Type 284"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_285(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 285 markets.
        """
        bet_type = "Bet Type 285"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_286(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 286 markets.
        """
        bet_type = "Bet Type 286"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_287(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 287 markets.
        """
        bet_type = "Bet Type 287"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_288(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 288 markets.
        """
        bet_type = "Bet Type 288"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_289(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 289 markets.
        """
        bet_type = "Bet Type 289"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_29(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 29 markets.
        """
        bet_type = "Bet Type 29"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_290(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 290 markets.
        """
        bet_type = "Bet Type 290"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_291(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 291 markets.
        """
        bet_type = "Bet Type 291"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_292(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 292 markets.
        """
        bet_type = "Bet Type 292"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_293(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 293 markets.
        """
        bet_type = "Bet Type 293"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_294(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 294 markets.
        """
        bet_type = "Bet Type 294"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_295(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 295 markets.
        """
        bet_type = "Bet Type 295"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_296(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 296 markets.
        """
        bet_type = "Bet Type 296"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_297(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 297 markets.
        """
        bet_type = "Bet Type 297"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_298(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 298 markets.
        """
        bet_type = "Bet Type 298"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_299(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 299 markets.
        """
        bet_type = "Bet Type 299"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_3(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 3 markets.
        """
        bet_type = "Bet Type 3"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_30(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 30 markets.
        """
        bet_type = "Bet Type 30"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_300(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 300 markets.
        """
        bet_type = "Bet Type 300"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_301(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 301 markets.
        """
        bet_type = "Bet Type 301"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_302(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 302 markets.
        """
        bet_type = "Bet Type 302"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_303(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 303 markets.
        """
        bet_type = "Bet Type 303"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_304(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 304 markets.
        """
        bet_type = "Bet Type 304"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_305(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 305 markets.
        """
        bet_type = "Bet Type 305"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_306(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 306 markets.
        """
        bet_type = "Bet Type 306"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_307(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 307 markets.
        """
        bet_type = "Bet Type 307"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_308(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 308 markets.
        """
        bet_type = "Bet Type 308"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_309(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 309 markets.
        """
        bet_type = "Bet Type 309"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_31(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 31 markets.
        """
        bet_type = "Bet Type 31"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_310(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 310 markets.
        """
        bet_type = "Bet Type 310"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_311(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 311 markets.
        """
        bet_type = "Bet Type 311"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_312(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 312 markets.
        """
        bet_type = "Bet Type 312"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_313(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 313 markets.
        """
        bet_type = "Bet Type 313"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_314(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 314 markets.
        """
        bet_type = "Bet Type 314"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_315(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 315 markets.
        """
        bet_type = "Bet Type 315"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_316(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 316 markets.
        """
        bet_type = "Bet Type 316"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_317(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 317 markets.
        """
        bet_type = "Bet Type 317"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_318(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 318 markets.
        """
        bet_type = "Bet Type 318"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_319(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 319 markets.
        """
        bet_type = "Bet Type 319"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_32(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 32 markets.
        """
        bet_type = "Bet Type 32"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_320(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 320 markets.
        """
        bet_type = "Bet Type 320"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_321(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 321 markets.
        """
        bet_type = "Bet Type 321"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_322(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 322 markets.
        """
        bet_type = "Bet Type 322"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_323(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 323 markets.
        """
        bet_type = "Bet Type 323"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_324(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 324 markets.
        """
        bet_type = "Bet Type 324"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_325(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 325 markets.
        """
        bet_type = "Bet Type 325"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_326(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 326 markets.
        """
        bet_type = "Bet Type 326"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_327(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 327 markets.
        """
        bet_type = "Bet Type 327"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_328(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 328 markets.
        """
        bet_type = "Bet Type 328"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_329(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 329 markets.
        """
        bet_type = "Bet Type 329"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_33(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 33 markets.
        """
        bet_type = "Bet Type 33"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_330(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 330 markets.
        """
        bet_type = "Bet Type 330"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_331(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 331 markets.
        """
        bet_type = "Bet Type 331"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_332(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 332 markets.
        """
        bet_type = "Bet Type 332"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_333(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 333 markets.
        """
        bet_type = "Bet Type 333"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_334(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 334 markets.
        """
        bet_type = "Bet Type 334"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_335(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 335 markets.
        """
        bet_type = "Bet Type 335"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_336(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 336 markets.
        """
        bet_type = "Bet Type 336"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_337(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 337 markets.
        """
        bet_type = "Bet Type 337"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_338(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 338 markets.
        """
        bet_type = "Bet Type 338"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_339(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 339 markets.
        """
        bet_type = "Bet Type 339"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_34(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 34 markets.
        """
        bet_type = "Bet Type 34"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_340(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 340 markets.
        """
        bet_type = "Bet Type 340"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_341(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 341 markets.
        """
        bet_type = "Bet Type 341"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_342(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 342 markets.
        """
        bet_type = "Bet Type 342"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_343(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 343 markets.
        """
        bet_type = "Bet Type 343"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_344(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 344 markets.
        """
        bet_type = "Bet Type 344"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_345(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 345 markets.
        """
        bet_type = "Bet Type 345"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_346(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 346 markets.
        """
        bet_type = "Bet Type 346"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_347(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 347 markets.
        """
        bet_type = "Bet Type 347"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_348(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 348 markets.
        """
        bet_type = "Bet Type 348"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_349(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 349 markets.
        """
        bet_type = "Bet Type 349"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_35(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 35 markets.
        """
        bet_type = "Bet Type 35"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_350(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 350 markets.
        """
        bet_type = "Bet Type 350"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_351(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 351 markets.
        """
        bet_type = "Bet Type 351"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_352(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 352 markets.
        """
        bet_type = "Bet Type 352"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_353(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 353 markets.
        """
        bet_type = "Bet Type 353"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_354(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 354 markets.
        """
        bet_type = "Bet Type 354"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_355(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 355 markets.
        """
        bet_type = "Bet Type 355"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_356(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 356 markets.
        """
        bet_type = "Bet Type 356"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_357(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 357 markets.
        """
        bet_type = "Bet Type 357"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_358(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 358 markets.
        """
        bet_type = "Bet Type 358"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_359(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 359 markets.
        """
        bet_type = "Bet Type 359"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_36(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 36 markets.
        """
        bet_type = "Bet Type 36"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_360(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 360 markets.
        """
        bet_type = "Bet Type 360"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_361(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 361 markets.
        """
        bet_type = "Bet Type 361"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_362(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 362 markets.
        """
        bet_type = "Bet Type 362"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_363(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 363 markets.
        """
        bet_type = "Bet Type 363"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_364(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 364 markets.
        """
        bet_type = "Bet Type 364"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_365(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 365 markets.
        """
        bet_type = "Bet Type 365"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_366(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 366 markets.
        """
        bet_type = "Bet Type 366"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_367(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 367 markets.
        """
        bet_type = "Bet Type 367"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_368(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 368 markets.
        """
        bet_type = "Bet Type 368"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_369(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 369 markets.
        """
        bet_type = "Bet Type 369"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_37(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 37 markets.
        """
        bet_type = "Bet Type 37"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_370(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 370 markets.
        """
        bet_type = "Bet Type 370"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_371(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 371 markets.
        """
        bet_type = "Bet Type 371"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_372(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 372 markets.
        """
        bet_type = "Bet Type 372"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_373(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 373 markets.
        """
        bet_type = "Bet Type 373"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_374(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 374 markets.
        """
        bet_type = "Bet Type 374"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_375(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 375 markets.
        """
        bet_type = "Bet Type 375"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_376(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 376 markets.
        """
        bet_type = "Bet Type 376"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_377(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 377 markets.
        """
        bet_type = "Bet Type 377"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_378(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 378 markets.
        """
        bet_type = "Bet Type 378"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_379(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 379 markets.
        """
        bet_type = "Bet Type 379"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_38(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 38 markets.
        """
        bet_type = "Bet Type 38"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_380(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 380 markets.
        """
        bet_type = "Bet Type 380"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_381(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 381 markets.
        """
        bet_type = "Bet Type 381"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_382(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 382 markets.
        """
        bet_type = "Bet Type 382"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_383(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 383 markets.
        """
        bet_type = "Bet Type 383"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_384(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 384 markets.
        """
        bet_type = "Bet Type 384"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_385(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 385 markets.
        """
        bet_type = "Bet Type 385"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_386(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 386 markets.
        """
        bet_type = "Bet Type 386"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_387(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 387 markets.
        """
        bet_type = "Bet Type 387"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_388(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 388 markets.
        """
        bet_type = "Bet Type 388"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_389(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 389 markets.
        """
        bet_type = "Bet Type 389"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_39(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 39 markets.
        """
        bet_type = "Bet Type 39"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_390(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 390 markets.
        """
        bet_type = "Bet Type 390"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_391(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 391 markets.
        """
        bet_type = "Bet Type 391"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_392(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 392 markets.
        """
        bet_type = "Bet Type 392"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_393(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 393 markets.
        """
        bet_type = "Bet Type 393"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_394(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 394 markets.
        """
        bet_type = "Bet Type 394"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_395(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 395 markets.
        """
        bet_type = "Bet Type 395"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_396(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 396 markets.
        """
        bet_type = "Bet Type 396"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_397(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 397 markets.
        """
        bet_type = "Bet Type 397"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_398(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 398 markets.
        """
        bet_type = "Bet Type 398"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_399(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 399 markets.
        """
        bet_type = "Bet Type 399"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_4(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 4 markets.
        """
        bet_type = "Bet Type 4"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_40(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 40 markets.
        """
        bet_type = "Bet Type 40"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_400(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 400 markets.
        """
        bet_type = "Bet Type 400"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_41(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 41 markets.
        """
        bet_type = "Bet Type 41"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_42(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 42 markets.
        """
        bet_type = "Bet Type 42"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_43(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 43 markets.
        """
        bet_type = "Bet Type 43"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_44(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 44 markets.
        """
        bet_type = "Bet Type 44"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_45(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 45 markets.
        """
        bet_type = "Bet Type 45"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_46(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 46 markets.
        """
        bet_type = "Bet Type 46"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_47(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 47 markets.
        """
        bet_type = "Bet Type 47"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_48(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 48 markets.
        """
        bet_type = "Bet Type 48"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_49(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 49 markets.
        """
        bet_type = "Bet Type 49"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_5(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 5 markets.
        """
        bet_type = "Bet Type 5"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_50(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 50 markets.
        """
        bet_type = "Bet Type 50"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_51(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 51 markets.
        """
        bet_type = "Bet Type 51"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_52(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 52 markets.
        """
        bet_type = "Bet Type 52"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_53(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 53 markets.
        """
        bet_type = "Bet Type 53"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_54(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 54 markets.
        """
        bet_type = "Bet Type 54"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_55(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 55 markets.
        """
        bet_type = "Bet Type 55"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_56(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 56 markets.
        """
        bet_type = "Bet Type 56"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_57(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 57 markets.
        """
        bet_type = "Bet Type 57"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_58(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 58 markets.
        """
        bet_type = "Bet Type 58"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_59(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 59 markets.
        """
        bet_type = "Bet Type 59"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_6(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 6 markets.
        """
        bet_type = "Bet Type 6"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_60(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 60 markets.
        """
        bet_type = "Bet Type 60"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_61(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 61 markets.
        """
        bet_type = "Bet Type 61"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_62(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 62 markets.
        """
        bet_type = "Bet Type 62"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_63(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 63 markets.
        """
        bet_type = "Bet Type 63"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_64(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 64 markets.
        """
        bet_type = "Bet Type 64"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_65(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 65 markets.
        """
        bet_type = "Bet Type 65"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_66(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 66 markets.
        """
        bet_type = "Bet Type 66"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_67(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 67 markets.
        """
        bet_type = "Bet Type 67"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_68(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 68 markets.
        """
        bet_type = "Bet Type 68"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_69(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 69 markets.
        """
        bet_type = "Bet Type 69"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_7(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 7 markets.
        """
        bet_type = "Bet Type 7"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_70(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 70 markets.
        """
        bet_type = "Bet Type 70"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_71(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 71 markets.
        """
        bet_type = "Bet Type 71"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_72(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 72 markets.
        """
        bet_type = "Bet Type 72"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_73(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 73 markets.
        """
        bet_type = "Bet Type 73"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_74(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 74 markets.
        """
        bet_type = "Bet Type 74"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_75(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 75 markets.
        """
        bet_type = "Bet Type 75"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_76(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 76 markets.
        """
        bet_type = "Bet Type 76"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_77(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 77 markets.
        """
        bet_type = "Bet Type 77"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_78(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 78 markets.
        """
        bet_type = "Bet Type 78"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_79(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 79 markets.
        """
        bet_type = "Bet Type 79"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_8(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 8 markets.
        """
        bet_type = "Bet Type 8"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_80(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 80 markets.
        """
        bet_type = "Bet Type 80"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_81(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 81 markets.
        """
        bet_type = "Bet Type 81"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_82(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 82 markets.
        """
        bet_type = "Bet Type 82"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_83(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 83 markets.
        """
        bet_type = "Bet Type 83"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_84(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 84 markets.
        """
        bet_type = "Bet Type 84"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_85(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 85 markets.
        """
        bet_type = "Bet Type 85"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_86(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 86 markets.
        """
        bet_type = "Bet Type 86"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_87(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 87 markets.
        """
        bet_type = "Bet Type 87"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_88(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 88 markets.
        """
        bet_type = "Bet Type 88"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_89(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 89 markets.
        """
        bet_type = "Bet Type 89"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_9(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 9 markets.
        """
        bet_type = "Bet Type 9"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_90(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 90 markets.
        """
        bet_type = "Bet Type 90"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_91(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 91 markets.
        """
        bet_type = "Bet Type 91"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_92(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 92 markets.
        """
        bet_type = "Bet Type 92"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_93(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 93 markets.
        """
        bet_type = "Bet Type 93"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_94(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 94 markets.
        """
        bet_type = "Bet Type 94"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_95(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 95 markets.
        """
        bet_type = "Bet Type 95"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_96(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 96 markets.
        """
        bet_type = "Bet Type 96"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_97(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 97 markets.
        """
        bet_type = "Bet Type 97"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_98(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 98 markets.
        """
        bet_type = "Bet Type 98"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_bet_type_99(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Bet Type 99 markets.
        """
        bet_type = "Bet Type 99"
        
        return cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
    

    @classmethod
        def calculate_asian_handicap_0_5(cls, 
        back_odds_yes: Union[int, float, Decimal],
        lay_odds_yes: Union[int, float, Decimal],
        back_odds_no: Union[int, float, Decimal],
        lay_odds_no: Union[int, float, Decimal],
        stake: Union[int, float, Decimal],
        commission: Union[int, float, Decimal] = Decimal("0.02"),
        back_commission: Union[int, float, Decimal] = Decimal("0.00")
    ) -> Union[BetResult, ExtendedBetResult]:
        """
        Calculate matched betting for Asian Handicap +0.5 markets.
        """
        bet_type = "Asian Handicap +0.5"
        
        base_result = cls._calculate_binary_outcome_bet(
            bet_type=bet_type,
            back_odds_yes=back_odds_yes,
            lay_odds_yes=lay_odds_yes,
            back_odds_no=back_odds_no,
            lay_odds_no=lay_odds_no,
            stake=stake,
            commission=commission,
            back_commission=back_commission
        )
        
        extra_context = {"handicap": Decimal("0.5")}
        return cls.create_standard_result(
            bet_type=bet_type,
            profit_scenarios=base_result["profit_scenarios"],
            lay_stakes=base_result["lay_stakes"],
            stake=base_result["stake"],
            commission=base_result["commission"],
            back_commission=base_result["back_commission"],
            extra_context=extra_context
        )
    


# Factory method to get calculator by name
def get_calculator_by_name(bet_type: str) -> Any:
    """
    Get a calculator method by bet type name.
    
    Args:
        bet_type: The name of the bet type
        
    Returns:
        The corresponding calculator method
        
    Raises:
        UnsupportedMarketError: If bet type is not supported
    """
    # Map bet type names to calculator methods
    calculators = {
        'Match Result 1X2': StrategyCalculators.calculate_match_result_1x2,
        'Double Chance': StrategyCalculators.calculate_double_chance,
        'Draw No Bet': StrategyCalculators.calculate_draw_no_bet,
        'Asian Handicap': StrategyCalculators.calculate_asian_handicap,
        'Win to Nil': StrategyCalculators.calculate_win_to_nil,
        'Both Teams to Score': StrategyCalculators.calculate_btts_yes_no,
        'Over/Under Goals': StrategyCalculators.calculate_over_under_goals,
        'Over 0.5 Goals': lambda **kwargs: StrategyCalculators.calculate_over_goals(goal_line=0.5, **kwargs),
        'Over 1.5 Goals': lambda **kwargs: StrategyCalculators.calculate_over_goals(goal_line=1.5, **kwargs),
        'Over 2.5 Goals': lambda **kwargs: StrategyCalculators.calculate_over_goals(goal_line=2.5, **kwargs),
        'Under 0.5 Goals': lambda **kwargs: StrategyCalculators.calculate_under_goals(goal_line=0.5, **kwargs),
        'Under 1.5 Goals': lambda **kwargs: StrategyCalculators.calculate_under_goals(goal_line=1.5, **kwargs),
        'Under 2.5 Goals': lambda **kwargs: StrategyCalculators.calculate_under_goals(goal_line=2.5, **kwargs),
        'Both Teams to Score First Half': StrategyCalculators.calculate_btts_first_half,
        'Both Teams to Score Second Half': StrategyCalculators.calculate_btts_second_half,
        'Team to Score': StrategyCalculators.calculate_team_to_score,
        'Correct Score': StrategyCalculators.calculate_correct_score,
        'Half-Time/Full-Time': StrategyCalculators.calculate_half_time_full_time,
        'Half-Time Result': StrategyCalculators.calculate_half_time_result,
        'First Goalscorer': StrategyCalculators.calculate_first_goalscorer,
        'Anytime Goalscorer': StrategyCalculators.calculate_anytime_goalscorer,
        'Match to Go to Extra Time': StrategyCalculators.calculate_match_to_go_to_extra_time,
        'Match to Go to Penalties': StrategyCalculators.calculate_match_to_go_to_penalties,
        'Team to Score in Both Halves': StrategyCalculators.calculate_team_to_score_in_both_halves,
        'Corner Match Result and Over/Under': StrategyCalculators.calculate_corner_match_result_and_over_under,
        'Player to Score Anytime': lambda **kwargs: StrategyCalculators.calculate_player_to_score_anytime(**kwargs),
        'Player to Score First': lambda **kwargs: StrategyCalculators.calculate_player_to_score_first(**kwargs),
        'Player to Score Last': lambda **kwargs: StrategyCalculators.calculate_player_to_score_last(**kwargs),
        'Player to Score Two or More': lambda **kwargs: StrategyCalculators.calculate_player_to_score_two_or_more(**kwargs),
        'Player to Score Hat-Trick': lambda **kwargs: StrategyCalculators.calculate_player_to_score_hat_trick(**kwargs),
        'Player to Be Booked': lambda **kwargs: StrategyCalculators.calculate_player_to_be_booked(**kwargs),
        'Player to Be Sent Off': lambda **kwargs: StrategyCalculators.calculate_player_to_be_sent_off_alternate(player_name=kwargs.pop('player', 'Player'), **kwargs),
        'Player Shots on Target': lambda **kwargs: StrategyCalculators.calculate_player_shots_on_target(**kwargs),
        'Player to Score and Assist': lambda **kwargs: StrategyCalculators.calculate_player_to_score_and_assist(**kwargs),
        'Player to Score from Outside the Box': lambda **kwargs: StrategyCalculators.calculate_player_to_score_outside_box(**kwargs),
        'Player to Score a Header': lambda **kwargs: StrategyCalculators.calculate_player_to_score_header(**kwargs),
        'Player to Score a Penalty': lambda **kwargs: StrategyCalculators.calculate_player_to_score_penalty(**kwargs),
        'Time of First Goal': lambda **kwargs: StrategyCalculators.calculate_time_of_first_goal(**kwargs),
        'Half with Most Goals': lambda **kwargs: StrategyCalculators.calculate_half_with_most_goals(**kwargs),
        'First Goal Time Bands': lambda **kwargs: StrategyCalculators.calculate_first_goal_time_bands(**kwargs),
        '10 Minute Result': lambda **kwargs: StrategyCalculators.calculate_10_minute_result(minute=10, **kwargs),
        '15 Minute Result': lambda **kwargs: StrategyCalculators.calculate_10_minute_result(minute=15, **kwargs),
        '20 Minute Result': lambda **kwargs: StrategyCalculators.calculate_10_minute_result(minute=20, **kwargs),
        '30 Minute Result': lambda **kwargs: StrategyCalculators.calculate_10_minute_result(minute=30, **kwargs),
        'Goal in First 10 Minutes': lambda **kwargs: StrategyCalculators.calculate_goal_in_first_10_minutes(minutes=10, **kwargs),
        'Goal in First 15 Minutes': lambda **kwargs: StrategyCalculators.calculate_goal_in_first_10_minutes(minutes=15, **kwargs),
        'Goal in First 20 Minutes': lambda **kwargs: StrategyCalculators.calculate_goal_in_first_10_minutes(minutes=20, **kwargs),
        'Goal in First 30 Minutes': lambda **kwargs: StrategyCalculators.calculate_goal_in_first_10_minutes(minutes=30, **kwargs),
        'Time of Next Goal': lambda **kwargs: StrategyCalculators.calculate_time_of_next_goal(goal_number=1, **kwargs),
        'Time of Second Goal': lambda **kwargs: StrategyCalculators.calculate_time_of_next_goal(goal_number=2, **kwargs),
        'Time of Third Goal': lambda **kwargs: StrategyCalculators.calculate_time_of_next_goal(goal_number=3, **kwargs),
        'Winning Margin': lambda **kwargs: StrategyCalculators.calculate_winning_margin(**kwargs),
        'Method of Victory': lambda **kwargs: StrategyCalculators.calculate_method_of_victory(**kwargs),
        'Team to Score First': lambda **kwargs: StrategyCalculators.calculate_team_to_score_first(**kwargs),
        'Team to Score Last': lambda **kwargs: StrategyCalculators.calculate_team_to_score_last(**kwargs),
        'Match Goals Odd/Even': lambda **kwargs: StrategyCalculators.calculate_match_goals_odd_even(**kwargs),
        'Home to Win to Nil': lambda **kwargs: StrategyCalculators.calculate_team_to_win_to_nil(team="Home", **kwargs),
        'Away to Win to Nil': lambda **kwargs: StrategyCalculators.calculate_team_to_win_to_nil(team="Away", **kwargs),
        'Both Teams to Score in Both Halves': lambda **kwargs: StrategyCalculators.calculate_both_teams_to_score_in_both_halves(**kwargs),
        'Exact Score': lambda **kwargs: StrategyCalculators.calculate_exact_score(**kwargs),
        'Half Time Score': lambda **kwargs: StrategyCalculators.calculate_half_time_score(**kwargs),
        'Correct Score Group': lambda **kwargs: StrategyCalculators.calculate_correct_score_group(**kwargs),
        'Scorecast': lambda **kwargs: StrategyCalculators.calculate_score_cast(**kwargs),
        'Wincast': lambda **kwargs: StrategyCalculators.calculate_wincast(**kwargs),
        'Timecast': lambda **kwargs: StrategyCalculators.calculate_timecast(**kwargs),
        'Total Cards Over/Under 3.5': lambda **kwargs: StrategyCalculators.calculate_total_cards_over_under(card_line=3.5, **kwargs),
        'Total Cards Over/Under 4.5': lambda **kwargs: StrategyCalculators.calculate_total_cards_over_under(card_line=4.5, **kwargs),
        'Total Cards Over/Under 5.5': lambda **kwargs: StrategyCalculators.calculate_total_cards_over_under(card_line=5.5, **kwargs),
        'Home Cards Over/Under 1.5': lambda **kwargs: StrategyCalculators.calculate_team_cards_over_under(team="Home", card_line=1.5, **kwargs),
        'Away Cards Over/Under 1.5': lambda **kwargs: StrategyCalculators.calculate_team_cards_over_under(team="Away", card_line=1.5, **kwargs),
        'First Card': lambda **kwargs: StrategyCalculators.calculate_first_card_alternate(**kwargs),
        'Last Card': lambda **kwargs: StrategyCalculators.calculate_last_card_alternate(**kwargs),
        'Total Booking Points': lambda **kwargs: StrategyCalculators.calculate_total_bookings_points(**kwargs),
        'Time of First Card': lambda **kwargs: StrategyCalculators.calculate_time_of_first_card(**kwargs),
        'Team with Most Cards': lambda **kwargs: StrategyCalculators.calculate_team_with_most_cards(**kwargs),
        'Red Card in Match': lambda **kwargs: StrategyCalculators.calculate_red_card_in_match(**kwargs),
        'Total Corners Over/Under 9.5': lambda **kwargs: StrategyCalculators.calculate_total_corners_over_under(corner_line=9.5, **kwargs),
        'Total Corners Over/Under 10.5': lambda **kwargs: StrategyCalculators.calculate_total_corners_over_under(corner_line=10.5, **kwargs),
        'Total Corners Over/Under 11.5': lambda **kwargs: StrategyCalculators.calculate_total_corners_over_under(corner_line=11.5, **kwargs),
        'Home Corners Over/Under 4.5': lambda **kwargs: StrategyCalculators.calculate_team_corners_over_under(team="Home", corner_line=4.5, **kwargs),
        'Away Corners Over/Under 4.5': lambda **kwargs: StrategyCalculators.calculate_team_corners_over_under(team="Away", corner_line=4.5, **kwargs),
        'First Corner': lambda **kwargs: StrategyCalculators.calculate_first_corner(**kwargs),
        'Last Corner': lambda **kwargs: StrategyCalculators.calculate_last_corner(**kwargs),
        'Corner Match Handicap': lambda **kwargs: StrategyCalculators.calculate_corner_match_handicap(**kwargs),
        'Corner Match Race to 5': lambda **kwargs: StrategyCalculators.calculate_corner_match_race(target=5, **kwargs),
        'Corner Match Race to 8': lambda **kwargs: StrategyCalculators.calculate_corner_match_race(target=8, **kwargs),
        'Highest Scoring Half': lambda **kwargs: StrategyCalculators.calculate_highest_scoring_half(**kwargs),
        'First Half Result': lambda **kwargs: StrategyCalculators.calculate_first_half_result(**kwargs),
        'Second Half Result': lambda **kwargs: StrategyCalculators.calculate_second_half_result(**kwargs),
        'Home to Score': lambda **kwargs: StrategyCalculators.calculate_team_to_score(team="Home", **kwargs),
        'Away to Score': lambda **kwargs: StrategyCalculators.calculate_team_to_score(team="Away", **kwargs),
        'Home Clean Sheet': lambda **kwargs: StrategyCalculators.calculate_team_clean_sheet(team="Home", **kwargs),
        'Away Clean Sheet': lambda **kwargs: StrategyCalculators.calculate_team_clean_sheet(team="Away", **kwargs),
        'Home Shots on Target': lambda **kwargs: StrategyCalculators.calculate_team_shots_on_target(team="Home", **kwargs),
        'Away Shots on Target': lambda **kwargs: StrategyCalculators.calculate_team_shots_on_target(team="Away", **kwargs),
        'Home Goals Exact': lambda **kwargs: StrategyCalculators.calculate_team_goals_exact(team="Home", **kwargs),
        'Away Goals Exact': lambda **kwargs: StrategyCalculators.calculate_team_goals_exact(team="Away", **kwargs),
        'Home to Win Either Half': lambda **kwargs: StrategyCalculators.calculate_team_to_win_either_half(team="Home", **kwargs),
        'Away to Win Either Half': lambda **kwargs: StrategyCalculators.calculate_team_to_win_either_half(team="Away", **kwargs),
        'Home to Win Both Halves': lambda **kwargs: StrategyCalculators.calculate_team_to_win_both_halves(team="Home", **kwargs),
        'Away to Win Both Halves': lambda **kwargs: StrategyCalculators.calculate_team_to_win_both_halves(team="Away", **kwargs),
        'Home to Score in Both Halves': lambda **kwargs: StrategyCalculators.calculate_team_to_score_in_both_halves(team="Home", **kwargs),
        'Away to Score in Both Halves': lambda **kwargs: StrategyCalculators.calculate_team_to_score_in_both_halves(team="Away", **kwargs),
        'Home Winning Margin': lambda **kwargs: StrategyCalculators.calculate_team_winning_margin(team="Home", **kwargs),
        'Away Winning Margin': lambda **kwargs: StrategyCalculators.calculate_team_winning_margin(team="Away", **kwargs),
        'Result and Both Teams to Score': lambda **kwargs: StrategyCalculators.calculate_result_and_both_teams_to_score(**kwargs),
        'Result and Over/Under 2.5': lambda **kwargs: StrategyCalculators.calculate_result_and_over_under(goal_line=2.5, **kwargs),
        'Result and Over/Under 3.5': lambda **kwargs: StrategyCalculators.calculate_result_and_over_under(goal_line=3.5, **kwargs),
        'Correct Score and Both Teams to Score': lambda **kwargs: StrategyCalculators.calculate_correct_score_and_both_teams_to_score(**kwargs),
        'First Goalscorer and Result': lambda **kwargs: StrategyCalculators.calculate_first_goalscorer_and_result(**kwargs),
        'Halftime/Fulltime and Both Teams to Score': lambda **kwargs: StrategyCalculators.calculate_halftime_fulltime_and_both_teams_to_score(**kwargs),
        'First Half Result and Both Teams to Score': lambda **kwargs: StrategyCalculators.calculate_first_half_result_and_both_teams_to_score(**kwargs),
        'Double Chance and Both Teams to Score': lambda **kwargs: StrategyCalculators.calculate_double_chance_and_both_teams_to_score(**kwargs),
        'Total Booking Points Over 35.5': lambda **kwargs: StrategyCalculators.calculate_total_booking_points(bet_type_modifier="Over 35.5", **kwargs),
        'Total Booking Points Under 35.5': lambda **kwargs: StrategyCalculators.calculate_total_booking_points(bet_type_modifier="Under 35.5", **kwargs),
        'Total Booking Points Over 40.5': lambda **kwargs: StrategyCalculators.calculate_total_booking_points(bet_type_modifier="Over 40.5", **kwargs),
        'Total Booking Points Under 40.5': lambda **kwargs: StrategyCalculators.calculate_total_booking_points(bet_type_modifier="Under 40.5", **kwargs),
        'Home Total Booking Points Over 20.5': lambda **kwargs: StrategyCalculators.calculate_team_total_booking_points(team="Home", bet_type_modifier="Over 20.5", **kwargs),
        'Home Total Booking Points Under 20.5': lambda **kwargs: StrategyCalculators.calculate_team_total_booking_points(team="Home", bet_type_modifier="Under 20.5", **kwargs),
        'Away Total Booking Points Over 20.5': lambda **kwargs: StrategyCalculators.calculate_team_total_booking_points(team="Away", bet_type_modifier="Over 20.5", **kwargs),
        'Away Total Booking Points Under 20.5': lambda **kwargs: StrategyCalculators.calculate_team_total_booking_points(team="Away", bet_type_modifier="Under 20.5", **kwargs),
        'Total Cards Over 5.5': lambda **kwargs: StrategyCalculators.calculate_total_cards(bet_type_modifier="Over 5.5", **kwargs),
        'Total Cards Under 5.5': lambda **kwargs: StrategyCalculators.calculate_total_cards(bet_type_modifier="Under 5.5", **kwargs),
        'Total Cards Over 6.5': lambda **kwargs: StrategyCalculators.calculate_total_cards(bet_type_modifier="Over 6.5", **kwargs),
        'Total Cards Under 6.5': lambda **kwargs: StrategyCalculators.calculate_total_cards(bet_type_modifier="Under 6.5", **kwargs),
        'Home Total Cards Over 2.5': lambda **kwargs: StrategyCalculators.calculate_team_total_cards(team="Home", bet_type_modifier="Over 2.5", **kwargs),
        'Home Total Cards Under 2.5': lambda **kwargs: StrategyCalculators.calculate_team_total_cards(team="Home", bet_type_modifier="Under 2.5", **kwargs),
        'Away Total Cards Over 2.5': lambda **kwargs: StrategyCalculators.calculate_team_total_cards(team="Away", bet_type_modifier="Over 2.5", **kwargs),
        'Away Total Cards Under 2.5': lambda **kwargs: StrategyCalculators.calculate_team_total_cards(team="Away", bet_type_modifier="Under 2.5", **kwargs),
        'First Card': lambda **kwargs: StrategyCalculators.calculate_first_card_alternate(**kwargs),
        'Last Card': lambda **kwargs: StrategyCalculators.calculate_last_card_alternate(**kwargs),
        'Card Handicap Home -0.5': lambda **kwargs: StrategyCalculators.calculate_card_handicap(team="Home", handicap=-0.5, **kwargs),
        'Card Handicap Away +0.5': lambda **kwargs: StrategyCalculators.calculate_card_handicap(team="Away", handicap=0.5, **kwargs),
        # Additional 900+ calculators would be mapped here.
        # The pattern would be similar, mapping bet type names to calculator methods.
    }
    
    # Check if bet type is supported
    if bet_type not in calculators:
        error_msg = f"Bet type {bet_type} is not supported"
        logger.error(error_msg)
        raise UnsupportedMarketError(error_msg)
    
    return calculators[bet_type]
